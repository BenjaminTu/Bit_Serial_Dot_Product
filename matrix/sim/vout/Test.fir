;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module DotGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {a : SInt<8>[10], b : SInt<8>[10], flip y : SInt<25>}
    
    wire _T_80 : SInt<5>[10] @[Test.scala 57:18]
    _T_80[0] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[1] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[2] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[3] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[4] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[5] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[6] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[7] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[8] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    _T_80[9] <= asSInt(UInt<5>("h0a")) @[Test.scala 57:18]
    io.a[0] <= _T_80[0] @[Test.scala 57:8]
    io.a[1] <= _T_80[1] @[Test.scala 57:8]
    io.a[2] <= _T_80[2] @[Test.scala 57:8]
    io.a[3] <= _T_80[3] @[Test.scala 57:8]
    io.a[4] <= _T_80[4] @[Test.scala 57:8]
    io.a[5] <= _T_80[5] @[Test.scala 57:8]
    io.a[6] <= _T_80[6] @[Test.scala 57:8]
    io.a[7] <= _T_80[7] @[Test.scala 57:8]
    io.a[8] <= _T_80[8] @[Test.scala 57:8]
    io.a[9] <= _T_80[9] @[Test.scala 57:8]
    wire _T_106 : SInt<5>[10] @[Test.scala 58:18]
    _T_106[0] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[1] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[2] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[3] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[4] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[5] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[6] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[7] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[8] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    _T_106[9] <= asSInt(UInt<5>("h0c")) @[Test.scala 58:18]
    io.b[0] <= _T_106[0] @[Test.scala 58:8]
    io.b[1] <= _T_106[1] @[Test.scala 58:8]
    io.b[2] <= _T_106[2] @[Test.scala 58:8]
    io.b[3] <= _T_106[3] @[Test.scala 58:8]
    io.b[4] <= _T_106[4] @[Test.scala 58:8]
    io.b[5] <= _T_106[5] @[Test.scala 58:8]
    io.b[6] <= _T_106[6] @[Test.scala 58:8]
    io.b[7] <= _T_106[7] @[Test.scala 58:8]
    io.b[8] <= _T_106[8] @[Test.scala 58:8]
    io.b[9] <= _T_106[9] @[Test.scala 58:8]
    when UInt<1>("h01") : @[Test.scala 60:16]
      node _T_120 = bits(reset, 0, 0) @[Test.scala 61:11]
      node _T_122 = eq(_T_120, UInt<1>("h00")) @[Test.scala 61:11]
      when _T_122 : @[Test.scala 61:11]
        printf(clock, UInt<1>(1), "y: %d\n", io.y) @[Test.scala 61:11]
        skip @[Test.scala 61:11]
      skip @[Test.scala 60:16]
    
  module Dot : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>[10], flip b : SInt<8>[10], y : SInt<25>}
    
    wire initVals : SInt<32>[10] @[VectorMult.scala 55:31]
    initVals[0] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[1] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[2] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[3] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[4] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[5] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[6] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[7] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[8] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    initVals[9] <= asSInt(UInt<32>("h00")) @[VectorMult.scala 55:31]
    reg accum : SInt<32>[10], clock with : (reset => (reset, initVals)) @[VectorMult.scala 56:22]
    node _T_150 = mul(io.a[0], io.b[0]) @[VectorMult.scala 57:29]
    accum[0] <= _T_150 @[VectorMult.scala 57:18]
    node _T_151 = mul(io.a[1], io.b[1]) @[VectorMult.scala 59:42]
    node _T_152 = add(accum[0], _T_151) @[VectorMult.scala 59:30]
    accum[1] <= _T_152 @[VectorMult.scala 59:16]
    node _T_153 = mul(io.a[2], io.b[2]) @[VectorMult.scala 59:42]
    node _T_154 = add(accum[1], _T_153) @[VectorMult.scala 59:30]
    accum[2] <= _T_154 @[VectorMult.scala 59:16]
    node _T_155 = mul(io.a[3], io.b[3]) @[VectorMult.scala 59:42]
    node _T_156 = add(accum[2], _T_155) @[VectorMult.scala 59:30]
    accum[3] <= _T_156 @[VectorMult.scala 59:16]
    node _T_157 = mul(io.a[4], io.b[4]) @[VectorMult.scala 59:42]
    node _T_158 = add(accum[3], _T_157) @[VectorMult.scala 59:30]
    accum[4] <= _T_158 @[VectorMult.scala 59:16]
    node _T_159 = mul(io.a[5], io.b[5]) @[VectorMult.scala 59:42]
    node _T_160 = add(accum[4], _T_159) @[VectorMult.scala 59:30]
    accum[5] <= _T_160 @[VectorMult.scala 59:16]
    node _T_161 = mul(io.a[6], io.b[6]) @[VectorMult.scala 59:42]
    node _T_162 = add(accum[5], _T_161) @[VectorMult.scala 59:30]
    accum[6] <= _T_162 @[VectorMult.scala 59:16]
    node _T_163 = mul(io.a[7], io.b[7]) @[VectorMult.scala 59:42]
    node _T_164 = add(accum[6], _T_163) @[VectorMult.scala 59:30]
    accum[7] <= _T_164 @[VectorMult.scala 59:16]
    node _T_165 = mul(io.a[8], io.b[8]) @[VectorMult.scala 59:42]
    node _T_166 = add(accum[7], _T_165) @[VectorMult.scala 59:30]
    accum[8] <= _T_166 @[VectorMult.scala 59:16]
    node _T_167 = mul(io.a[9], io.b[9]) @[VectorMult.scala 59:42]
    node _T_168 = add(accum[8], _T_167) @[VectorMult.scala 59:30]
    accum[9] <= _T_168 @[VectorMult.scala 59:16]
    io.y <= accum[9] @[VectorMult.scala 61:8]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst DotGen of DotGen @[Test.scala 81:34]
    DotGen.clock <= clock
    DotGen.reset <= reset
    inst Dot of Dot @[Test.scala 82:33]
    Dot.clock <= clock
    Dot.reset <= reset
    Dot.io.a[0] <= DotGen.io.a[0] @[Test.scala 83:26]
    Dot.io.a[1] <= DotGen.io.a[1] @[Test.scala 83:26]
    Dot.io.a[2] <= DotGen.io.a[2] @[Test.scala 83:26]
    Dot.io.a[3] <= DotGen.io.a[3] @[Test.scala 83:26]
    Dot.io.a[4] <= DotGen.io.a[4] @[Test.scala 83:26]
    Dot.io.a[5] <= DotGen.io.a[5] @[Test.scala 83:26]
    Dot.io.a[6] <= DotGen.io.a[6] @[Test.scala 83:26]
    Dot.io.a[7] <= DotGen.io.a[7] @[Test.scala 83:26]
    Dot.io.a[8] <= DotGen.io.a[8] @[Test.scala 83:26]
    Dot.io.a[9] <= DotGen.io.a[9] @[Test.scala 83:26]
    Dot.io.b[0] <= DotGen.io.b[0] @[Test.scala 84:26]
    Dot.io.b[1] <= DotGen.io.b[1] @[Test.scala 84:26]
    Dot.io.b[2] <= DotGen.io.b[2] @[Test.scala 84:26]
    Dot.io.b[3] <= DotGen.io.b[3] @[Test.scala 84:26]
    Dot.io.b[4] <= DotGen.io.b[4] @[Test.scala 84:26]
    Dot.io.b[5] <= DotGen.io.b[5] @[Test.scala 84:26]
    Dot.io.b[6] <= DotGen.io.b[6] @[Test.scala 84:26]
    Dot.io.b[7] <= DotGen.io.b[7] @[Test.scala 84:26]
    Dot.io.b[8] <= DotGen.io.b[8] @[Test.scala 84:26]
    Dot.io.b[9] <= DotGen.io.b[9] @[Test.scala 84:26]
    DotGen.io.y <= Dot.io.y @[Test.scala 85:27]
    
