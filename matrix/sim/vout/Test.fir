;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module OneVecGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<2>[10], flip out : UInt<10>[2]}
    
    wire _T_62 : UInt<2>[10] @[Test.scala 85:26]
    _T_62[0] <= UInt<2>("h03") @[Test.scala 85:26]
    _T_62[1] <= UInt<1>("h00") @[Test.scala 85:26]
    _T_62[2] <= UInt<1>("h01") @[Test.scala 85:26]
    _T_62[3] <= UInt<2>("h02") @[Test.scala 85:26]
    _T_62[4] <= UInt<1>("h01") @[Test.scala 85:26]
    _T_62[5] <= UInt<2>("h03") @[Test.scala 85:26]
    _T_62[6] <= UInt<2>("h03") @[Test.scala 85:26]
    _T_62[7] <= UInt<2>("h02") @[Test.scala 85:26]
    _T_62[8] <= UInt<2>("h03") @[Test.scala 85:26]
    _T_62[9] <= UInt<2>("h02") @[Test.scala 85:26]
    io.arr[0] <= _T_62[0] @[Test.scala 85:16]
    io.arr[1] <= _T_62[1] @[Test.scala 85:16]
    io.arr[2] <= _T_62[2] @[Test.scala 85:16]
    io.arr[3] <= _T_62[3] @[Test.scala 85:16]
    io.arr[4] <= _T_62[4] @[Test.scala 85:16]
    io.arr[5] <= _T_62[5] @[Test.scala 85:16]
    io.arr[6] <= _T_62[6] @[Test.scala 85:16]
    io.arr[7] <= _T_62[7] @[Test.scala 85:16]
    io.arr[8] <= _T_62[8] @[Test.scala 85:16]
    io.arr[9] <= _T_62[9] @[Test.scala 85:16]
    when UInt<1>("h01") : @[Test.scala 90:17]
      node _T_76 = bits(reset, 0, 0) @[Test.scala 91:11]
      node _T_78 = eq(_T_76, UInt<1>("h00")) @[Test.scala 91:11]
      when _T_78 : @[Test.scala 91:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 91:11]
        skip @[Test.scala 91:11]
      node _T_79 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_81 = eq(_T_79, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_81 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[0]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_82 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_84 = eq(_T_82, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_84 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[1]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_85 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_87 = eq(_T_85, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_87 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[2]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_88 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_90 = eq(_T_88, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_90 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[3]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_91 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_93 = eq(_T_91, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_93 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[4]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_94 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_96 = eq(_T_94, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_96 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[5]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_97 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_99 = eq(_T_97, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_99 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[6]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_100 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_102 = eq(_T_100, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_102 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[7]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_103 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_105 = eq(_T_103, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_105 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[8]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_106 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_108 = eq(_T_106, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_108 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[9]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_109 = bits(reset, 0, 0) @[Test.scala 95:23]
      node _T_111 = eq(_T_109, UInt<1>("h00")) @[Test.scala 95:23]
      when _T_111 : @[Test.scala 95:23]
        printf(clock, UInt<1>(1), "packed result") @[Test.scala 95:23]
        skip @[Test.scala 95:23]
      node _T_112 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_114 = eq(_T_112, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_114 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_115 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_117 = eq(_T_115, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_117 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_118 = bits(reset, 0, 0) @[Test.scala 99:23]
      node _T_120 = eq(_T_118, UInt<1>("h00")) @[Test.scala 99:23]
      when _T_120 : @[Test.scala 99:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 99:23]
        skip @[Test.scala 99:23]
      skip @[Test.scala 90:17]
    
  module BitPack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<2>[10], out : UInt<10>[2]}
    
    wire _T_62 : UInt<1>[10] @[VectorMult.scala 87:55]
    _T_62[0] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[1] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[2] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[3] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[4] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[5] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[6] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[7] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[8] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_62[9] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    wire _T_88 : UInt<1>[10] @[VectorMult.scala 87:55]
    _T_88[0] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[1] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[2] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[3] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[4] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[5] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[6] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[7] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[8] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    _T_88[9] <= UInt<1>("h00") @[VectorMult.scala 87:55]
    wire bitArr : UInt<1>[10][2] @[VectorMult.scala 87:29]
    bitArr[0][0] <= _T_62[0] @[VectorMult.scala 87:29]
    bitArr[0][1] <= _T_62[1] @[VectorMult.scala 87:29]
    bitArr[0][2] <= _T_62[2] @[VectorMult.scala 87:29]
    bitArr[0][3] <= _T_62[3] @[VectorMult.scala 87:29]
    bitArr[0][4] <= _T_62[4] @[VectorMult.scala 87:29]
    bitArr[0][5] <= _T_62[5] @[VectorMult.scala 87:29]
    bitArr[0][6] <= _T_62[6] @[VectorMult.scala 87:29]
    bitArr[0][7] <= _T_62[7] @[VectorMult.scala 87:29]
    bitArr[0][8] <= _T_62[8] @[VectorMult.scala 87:29]
    bitArr[0][9] <= _T_62[9] @[VectorMult.scala 87:29]
    bitArr[1][0] <= _T_88[0] @[VectorMult.scala 87:29]
    bitArr[1][1] <= _T_88[1] @[VectorMult.scala 87:29]
    bitArr[1][2] <= _T_88[2] @[VectorMult.scala 87:29]
    bitArr[1][3] <= _T_88[3] @[VectorMult.scala 87:29]
    bitArr[1][4] <= _T_88[4] @[VectorMult.scala 87:29]
    bitArr[1][5] <= _T_88[5] @[VectorMult.scala 87:29]
    bitArr[1][6] <= _T_88[6] @[VectorMult.scala 87:29]
    bitArr[1][7] <= _T_88[7] @[VectorMult.scala 87:29]
    bitArr[1][8] <= _T_88[8] @[VectorMult.scala 87:29]
    bitArr[1][9] <= _T_88[9] @[VectorMult.scala 87:29]
    node _T_471 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_473 = and(_T_471, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][0] <= _T_473 @[VectorMult.scala 90:38]
    node _T_475 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_477 = and(_T_475, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][0] <= _T_477 @[VectorMult.scala 90:38]
    node _T_479 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_481 = and(_T_479, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][1] <= _T_481 @[VectorMult.scala 90:38]
    node _T_483 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_485 = and(_T_483, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][1] <= _T_485 @[VectorMult.scala 90:38]
    node _T_487 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_489 = and(_T_487, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][2] <= _T_489 @[VectorMult.scala 90:38]
    node _T_491 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_493 = and(_T_491, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][2] <= _T_493 @[VectorMult.scala 90:38]
    node _T_495 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_497 = and(_T_495, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][3] <= _T_497 @[VectorMult.scala 90:38]
    node _T_499 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_501 = and(_T_499, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][3] <= _T_501 @[VectorMult.scala 90:38]
    node _T_503 = dshr(io.arr[4], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_505 = and(_T_503, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][4] <= _T_505 @[VectorMult.scala 90:38]
    node _T_507 = dshr(io.arr[4], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_509 = and(_T_507, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][4] <= _T_509 @[VectorMult.scala 90:38]
    node _T_511 = dshr(io.arr[5], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_513 = and(_T_511, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][5] <= _T_513 @[VectorMult.scala 90:38]
    node _T_515 = dshr(io.arr[5], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_517 = and(_T_515, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][5] <= _T_517 @[VectorMult.scala 90:38]
    node _T_519 = dshr(io.arr[6], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_521 = and(_T_519, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][6] <= _T_521 @[VectorMult.scala 90:38]
    node _T_523 = dshr(io.arr[6], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_525 = and(_T_523, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][6] <= _T_525 @[VectorMult.scala 90:38]
    node _T_527 = dshr(io.arr[7], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_529 = and(_T_527, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][7] <= _T_529 @[VectorMult.scala 90:38]
    node _T_531 = dshr(io.arr[7], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_533 = and(_T_531, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][7] <= _T_533 @[VectorMult.scala 90:38]
    node _T_535 = dshr(io.arr[8], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_537 = and(_T_535, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][8] <= _T_537 @[VectorMult.scala 90:38]
    node _T_539 = dshr(io.arr[8], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_541 = and(_T_539, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][8] <= _T_541 @[VectorMult.scala 90:38]
    node _T_543 = dshr(io.arr[9], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_545 = and(_T_543, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][9] <= _T_545 @[VectorMult.scala 90:38]
    node _T_547 = dshr(io.arr[9], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_549 = and(_T_547, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][9] <= _T_549 @[VectorMult.scala 90:38]
    node _T_550 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 97:40]
    node _T_551 = cat(bitArr[0][4], bitArr[0][3]) @[VectorMult.scala 97:40]
    node _T_552 = cat(_T_551, bitArr[0][2]) @[VectorMult.scala 97:40]
    node _T_553 = cat(_T_552, _T_550) @[VectorMult.scala 97:40]
    node _T_554 = cat(bitArr[0][6], bitArr[0][5]) @[VectorMult.scala 97:40]
    node _T_555 = cat(bitArr[0][9], bitArr[0][8]) @[VectorMult.scala 97:40]
    node _T_556 = cat(_T_555, bitArr[0][7]) @[VectorMult.scala 97:40]
    node _T_557 = cat(_T_556, _T_554) @[VectorMult.scala 97:40]
    node _T_558 = cat(_T_557, _T_553) @[VectorMult.scala 97:40]
    io.out[0] <= _T_558 @[VectorMult.scala 97:27]
    node _T_559 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 97:40]
    node _T_560 = cat(bitArr[1][4], bitArr[1][3]) @[VectorMult.scala 97:40]
    node _T_561 = cat(_T_560, bitArr[1][2]) @[VectorMult.scala 97:40]
    node _T_562 = cat(_T_561, _T_559) @[VectorMult.scala 97:40]
    node _T_563 = cat(bitArr[1][6], bitArr[1][5]) @[VectorMult.scala 97:40]
    node _T_564 = cat(bitArr[1][9], bitArr[1][8]) @[VectorMult.scala 97:40]
    node _T_565 = cat(_T_564, bitArr[1][7]) @[VectorMult.scala 97:40]
    node _T_566 = cat(_T_565, _T_563) @[VectorMult.scala 97:40]
    node _T_567 = cat(_T_566, _T_562) @[VectorMult.scala 97:40]
    io.out[1] <= _T_567 @[VectorMult.scala 97:27]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst OneVecGen of OneVecGen @[Test.scala 133:39]
    OneVecGen.clock <= clock
    OneVecGen.reset <= reset
    inst BitPack of BitPack @[Test.scala 134:37]
    BitPack.clock <= clock
    BitPack.reset <= reset
    BitPack.io.arr[0] <= OneVecGen.io.arr[0] @[Test.scala 135:32]
    BitPack.io.arr[1] <= OneVecGen.io.arr[1] @[Test.scala 135:32]
    BitPack.io.arr[2] <= OneVecGen.io.arr[2] @[Test.scala 135:32]
    BitPack.io.arr[3] <= OneVecGen.io.arr[3] @[Test.scala 135:32]
    BitPack.io.arr[4] <= OneVecGen.io.arr[4] @[Test.scala 135:32]
    BitPack.io.arr[5] <= OneVecGen.io.arr[5] @[Test.scala 135:32]
    BitPack.io.arr[6] <= OneVecGen.io.arr[6] @[Test.scala 135:32]
    BitPack.io.arr[7] <= OneVecGen.io.arr[7] @[Test.scala 135:32]
    BitPack.io.arr[8] <= OneVecGen.io.arr[8] @[Test.scala 135:32]
    BitPack.io.arr[9] <= OneVecGen.io.arr[9] @[Test.scala 135:32]
    OneVecGen.io.out[0] <= BitPack.io.out[0] @[Test.scala 136:34]
    OneVecGen.io.out[1] <= BitPack.io.out[1] @[Test.scala 136:34]
    
