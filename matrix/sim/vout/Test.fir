;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module OneVecGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<3>[4], flip out : UInt<4>[3]}
    
    wire _T_46 : UInt<3>[4] @[Test.scala 85:26]
    _T_46[0] <= UInt<1>("h00") @[Test.scala 85:26]
    _T_46[1] <= UInt<3>("h06") @[Test.scala 85:26]
    _T_46[2] <= UInt<1>("h01") @[Test.scala 85:26]
    _T_46[3] <= UInt<2>("h03") @[Test.scala 85:26]
    io.arr[0] <= _T_46[0] @[Test.scala 85:16]
    io.arr[1] <= _T_46[1] @[Test.scala 85:16]
    io.arr[2] <= _T_46[2] @[Test.scala 85:16]
    io.arr[3] <= _T_46[3] @[Test.scala 85:16]
    when UInt<1>("h01") : @[Test.scala 90:17]
      node _T_54 = bits(reset, 0, 0) @[Test.scala 91:11]
      node _T_56 = eq(_T_54, UInt<1>("h00")) @[Test.scala 91:11]
      when _T_56 : @[Test.scala 91:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 91:11]
        skip @[Test.scala 91:11]
      node _T_57 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_59 = eq(_T_57, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_59 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[0]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_60 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_62 = eq(_T_60, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_62 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[1]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_63 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_65 = eq(_T_63, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_65 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[2]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_66 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_68 = eq(_T_66, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_68 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[3]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_69 = bits(reset, 0, 0) @[Test.scala 95:23]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[Test.scala 95:23]
      when _T_71 : @[Test.scala 95:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 95:23]
        skip @[Test.scala 95:23]
      node _T_72 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_74 = eq(_T_72, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_74 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_75 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_77 = eq(_T_75, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_77 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_78 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_80 = eq(_T_78, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_80 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[2]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_81 = bits(reset, 0, 0) @[Test.scala 99:23]
      node _T_83 = eq(_T_81, UInt<1>("h00")) @[Test.scala 99:23]
      when _T_83 : @[Test.scala 99:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 99:23]
        skip @[Test.scala 99:23]
      skip @[Test.scala 90:17]
    
  module BitPack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<3>[4], out : UInt<4>[3]}
    
    wire _T_46 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_46[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_60 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_60[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_74 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_74[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire bitArr : UInt<1>[4][3] @[VectorMult.scala 87:29]
    bitArr[0][0] <= _T_46[0] @[VectorMult.scala 87:29]
    bitArr[0][1] <= _T_46[1] @[VectorMult.scala 87:29]
    bitArr[0][2] <= _T_46[2] @[VectorMult.scala 87:29]
    bitArr[0][3] <= _T_46[3] @[VectorMult.scala 87:29]
    bitArr[1][0] <= _T_60[0] @[VectorMult.scala 87:29]
    bitArr[1][1] <= _T_60[1] @[VectorMult.scala 87:29]
    bitArr[1][2] <= _T_60[2] @[VectorMult.scala 87:29]
    bitArr[1][3] <= _T_60[3] @[VectorMult.scala 87:29]
    bitArr[2][0] <= _T_74[0] @[VectorMult.scala 87:29]
    bitArr[2][1] <= _T_74[1] @[VectorMult.scala 87:29]
    bitArr[2][2] <= _T_74[2] @[VectorMult.scala 87:29]
    bitArr[2][3] <= _T_74[3] @[VectorMult.scala 87:29]
    node _T_313 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_315 = and(_T_313, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][0] <= _T_315 @[VectorMult.scala 90:38]
    node _T_317 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_319 = and(_T_317, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][0] <= _T_319 @[VectorMult.scala 90:38]
    node _T_321 = dshr(io.arr[0], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_323 = and(_T_321, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][0] <= _T_323 @[VectorMult.scala 90:38]
    node _T_325 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_327 = and(_T_325, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][1] <= _T_327 @[VectorMult.scala 90:38]
    node _T_329 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_331 = and(_T_329, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][1] <= _T_331 @[VectorMult.scala 90:38]
    node _T_333 = dshr(io.arr[1], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_335 = and(_T_333, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][1] <= _T_335 @[VectorMult.scala 90:38]
    node _T_337 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_339 = and(_T_337, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][2] <= _T_339 @[VectorMult.scala 90:38]
    node _T_341 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_343 = and(_T_341, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][2] <= _T_343 @[VectorMult.scala 90:38]
    node _T_345 = dshr(io.arr[2], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_347 = and(_T_345, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][2] <= _T_347 @[VectorMult.scala 90:38]
    node _T_349 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_351 = and(_T_349, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][3] <= _T_351 @[VectorMult.scala 90:38]
    node _T_353 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_355 = and(_T_353, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][3] <= _T_355 @[VectorMult.scala 90:38]
    node _T_357 = dshr(io.arr[3], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_359 = and(_T_357, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][3] <= _T_359 @[VectorMult.scala 90:38]
    node _T_360 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 95:40]
    node _T_361 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 95:40]
    node _T_362 = cat(_T_361, _T_360) @[VectorMult.scala 95:40]
    io.out[0] <= _T_362 @[VectorMult.scala 95:27]
    node _T_363 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 95:40]
    node _T_364 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 95:40]
    node _T_365 = cat(_T_364, _T_363) @[VectorMult.scala 95:40]
    io.out[1] <= _T_365 @[VectorMult.scala 95:27]
    node _T_366 = cat(bitArr[2][1], bitArr[2][0]) @[VectorMult.scala 95:40]
    node _T_367 = cat(bitArr[2][3], bitArr[2][2]) @[VectorMult.scala 95:40]
    node _T_368 = cat(_T_367, _T_366) @[VectorMult.scala 95:40]
    io.out[2] <= _T_368 @[VectorMult.scala 95:27]
    
  module BitPack_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<3>[4], out : UInt<4>[3]}
    
    wire _T_46 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_46[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_60 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_60[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_74 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_74[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire bitArr : UInt<1>[4][3] @[VectorMult.scala 87:29]
    bitArr[0][0] <= _T_46[0] @[VectorMult.scala 87:29]
    bitArr[0][1] <= _T_46[1] @[VectorMult.scala 87:29]
    bitArr[0][2] <= _T_46[2] @[VectorMult.scala 87:29]
    bitArr[0][3] <= _T_46[3] @[VectorMult.scala 87:29]
    bitArr[1][0] <= _T_60[0] @[VectorMult.scala 87:29]
    bitArr[1][1] <= _T_60[1] @[VectorMult.scala 87:29]
    bitArr[1][2] <= _T_60[2] @[VectorMult.scala 87:29]
    bitArr[1][3] <= _T_60[3] @[VectorMult.scala 87:29]
    bitArr[2][0] <= _T_74[0] @[VectorMult.scala 87:29]
    bitArr[2][1] <= _T_74[1] @[VectorMult.scala 87:29]
    bitArr[2][2] <= _T_74[2] @[VectorMult.scala 87:29]
    bitArr[2][3] <= _T_74[3] @[VectorMult.scala 87:29]
    node _T_313 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_315 = and(_T_313, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][0] <= _T_315 @[VectorMult.scala 90:38]
    node _T_317 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_319 = and(_T_317, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][0] <= _T_319 @[VectorMult.scala 90:38]
    node _T_321 = dshr(io.arr[0], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_323 = and(_T_321, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][0] <= _T_323 @[VectorMult.scala 90:38]
    node _T_325 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_327 = and(_T_325, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][1] <= _T_327 @[VectorMult.scala 90:38]
    node _T_329 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_331 = and(_T_329, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][1] <= _T_331 @[VectorMult.scala 90:38]
    node _T_333 = dshr(io.arr[1], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_335 = and(_T_333, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][1] <= _T_335 @[VectorMult.scala 90:38]
    node _T_337 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_339 = and(_T_337, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][2] <= _T_339 @[VectorMult.scala 90:38]
    node _T_341 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_343 = and(_T_341, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][2] <= _T_343 @[VectorMult.scala 90:38]
    node _T_345 = dshr(io.arr[2], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_347 = and(_T_345, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][2] <= _T_347 @[VectorMult.scala 90:38]
    node _T_349 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_351 = and(_T_349, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][3] <= _T_351 @[VectorMult.scala 90:38]
    node _T_353 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_355 = and(_T_353, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][3] <= _T_355 @[VectorMult.scala 90:38]
    node _T_357 = dshr(io.arr[3], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_359 = and(_T_357, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][3] <= _T_359 @[VectorMult.scala 90:38]
    node _T_360 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 95:40]
    node _T_361 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 95:40]
    node _T_362 = cat(_T_361, _T_360) @[VectorMult.scala 95:40]
    io.out[0] <= _T_362 @[VectorMult.scala 95:27]
    node _T_363 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 95:40]
    node _T_364 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 95:40]
    node _T_365 = cat(_T_364, _T_363) @[VectorMult.scala 95:40]
    io.out[1] <= _T_365 @[VectorMult.scala 95:27]
    node _T_366 = cat(bitArr[2][1], bitArr[2][0]) @[VectorMult.scala 95:40]
    node _T_367 = cat(bitArr[2][3], bitArr[2][2]) @[VectorMult.scala 95:40]
    node _T_368 = cat(_T_367, _T_366) @[VectorMult.scala 95:40]
    io.out[2] <= _T_368 @[VectorMult.scala 95:27]
    
  module OneVecGen_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<3>[4], flip out : UInt<4>[3]}
    
    wire _T_46 : UInt<3>[4] @[Test.scala 85:26]
    _T_46[0] <= UInt<3>("h07") @[Test.scala 85:26]
    _T_46[1] <= UInt<1>("h00") @[Test.scala 85:26]
    _T_46[2] <= UInt<3>("h04") @[Test.scala 85:26]
    _T_46[3] <= UInt<3>("h04") @[Test.scala 85:26]
    io.arr[0] <= _T_46[0] @[Test.scala 85:16]
    io.arr[1] <= _T_46[1] @[Test.scala 85:16]
    io.arr[2] <= _T_46[2] @[Test.scala 85:16]
    io.arr[3] <= _T_46[3] @[Test.scala 85:16]
    when UInt<1>("h01") : @[Test.scala 90:17]
      node _T_54 = bits(reset, 0, 0) @[Test.scala 91:11]
      node _T_56 = eq(_T_54, UInt<1>("h00")) @[Test.scala 91:11]
      when _T_56 : @[Test.scala 91:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 91:11]
        skip @[Test.scala 91:11]
      node _T_57 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_59 = eq(_T_57, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_59 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[0]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_60 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_62 = eq(_T_60, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_62 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[1]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_63 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_65 = eq(_T_63, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_65 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[2]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_66 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_68 = eq(_T_66, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_68 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[3]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_69 = bits(reset, 0, 0) @[Test.scala 95:23]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[Test.scala 95:23]
      when _T_71 : @[Test.scala 95:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 95:23]
        skip @[Test.scala 95:23]
      node _T_72 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_74 = eq(_T_72, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_74 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_75 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_77 = eq(_T_75, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_77 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_78 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_80 = eq(_T_78, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_80 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[2]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_81 = bits(reset, 0, 0) @[Test.scala 99:23]
      node _T_83 = eq(_T_81, UInt<1>("h00")) @[Test.scala 99:23]
      when _T_83 : @[Test.scala 99:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 99:23]
        skip @[Test.scala 99:23]
      skip @[Test.scala 90:17]
    
  module BitSerial : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip weight : UInt<4>[3], flip activation : UInt<4>[3], product : UInt<9>}
    
    wire initVal : UInt<9>[9] @[VectorMult.scala 110:30]
    initVal[0] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[1] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[2] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[3] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[4] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[5] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[6] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[7] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    initVal[8] <= UInt<9>("h00") @[VectorMult.scala 110:30]
    reg sum : UInt<9>[9], clock with : (reset => (reset, initVal)) @[VectorMult.scala 111:26]
    node _T_115 = and(io.weight[0], io.activation[0]) @[VectorMult.scala 112:41]
    node _T_116 = bits(_T_115, 0, 0) @[Bitwise.scala 50:65]
    node _T_117 = bits(_T_115, 1, 1) @[Bitwise.scala 50:65]
    node _T_118 = bits(_T_115, 2, 2) @[Bitwise.scala 50:65]
    node _T_119 = bits(_T_115, 3, 3) @[Bitwise.scala 50:65]
    node _T_120 = add(_T_116, _T_117) @[Bitwise.scala 48:55]
    node _T_121 = add(_T_118, _T_119) @[Bitwise.scala 48:55]
    node _T_122 = add(_T_120, _T_121) @[Bitwise.scala 48:55]
    sum[0] <= _T_122 @[VectorMult.scala 112:16]
    node _T_123 = and(io.weight[0], io.activation[1]) @[VectorMult.scala 116:94]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 50:65]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 50:65]
    node _T_126 = bits(_T_123, 2, 2) @[Bitwise.scala 50:65]
    node _T_127 = bits(_T_123, 3, 3) @[Bitwise.scala 50:65]
    node _T_128 = add(_T_124, _T_125) @[Bitwise.scala 48:55]
    node _T_129 = add(_T_126, _T_127) @[Bitwise.scala 48:55]
    node _T_130 = add(_T_128, _T_129) @[Bitwise.scala 48:55]
    node _T_132 = dshl(_T_130, UInt<1>("h01")) @[VectorMult.scala 116:114]
    node _T_133 = add(sum[0], _T_132) @[VectorMult.scala 116:68]
    sum[1] <= _T_133 @[VectorMult.scala 116:48]
    node _T_134 = and(io.weight[0], io.activation[2]) @[VectorMult.scala 116:94]
    node _T_135 = bits(_T_134, 0, 0) @[Bitwise.scala 50:65]
    node _T_136 = bits(_T_134, 1, 1) @[Bitwise.scala 50:65]
    node _T_137 = bits(_T_134, 2, 2) @[Bitwise.scala 50:65]
    node _T_138 = bits(_T_134, 3, 3) @[Bitwise.scala 50:65]
    node _T_139 = add(_T_135, _T_136) @[Bitwise.scala 48:55]
    node _T_140 = add(_T_137, _T_138) @[Bitwise.scala 48:55]
    node _T_141 = add(_T_139, _T_140) @[Bitwise.scala 48:55]
    node _T_143 = dshl(_T_141, UInt<2>("h02")) @[VectorMult.scala 116:114]
    node _T_144 = add(sum[1], _T_143) @[VectorMult.scala 116:68]
    sum[2] <= _T_144 @[VectorMult.scala 116:48]
    node _T_145 = and(io.weight[1], io.activation[0]) @[VectorMult.scala 116:94]
    node _T_146 = bits(_T_145, 0, 0) @[Bitwise.scala 50:65]
    node _T_147 = bits(_T_145, 1, 1) @[Bitwise.scala 50:65]
    node _T_148 = bits(_T_145, 2, 2) @[Bitwise.scala 50:65]
    node _T_149 = bits(_T_145, 3, 3) @[Bitwise.scala 50:65]
    node _T_150 = add(_T_146, _T_147) @[Bitwise.scala 48:55]
    node _T_151 = add(_T_148, _T_149) @[Bitwise.scala 48:55]
    node _T_152 = add(_T_150, _T_151) @[Bitwise.scala 48:55]
    node _T_154 = dshl(_T_152, UInt<1>("h01")) @[VectorMult.scala 116:114]
    node _T_155 = add(sum[2], _T_154) @[VectorMult.scala 116:68]
    sum[3] <= _T_155 @[VectorMult.scala 116:48]
    node _T_156 = and(io.weight[1], io.activation[1]) @[VectorMult.scala 116:94]
    node _T_157 = bits(_T_156, 0, 0) @[Bitwise.scala 50:65]
    node _T_158 = bits(_T_156, 1, 1) @[Bitwise.scala 50:65]
    node _T_159 = bits(_T_156, 2, 2) @[Bitwise.scala 50:65]
    node _T_160 = bits(_T_156, 3, 3) @[Bitwise.scala 50:65]
    node _T_161 = add(_T_157, _T_158) @[Bitwise.scala 48:55]
    node _T_162 = add(_T_159, _T_160) @[Bitwise.scala 48:55]
    node _T_163 = add(_T_161, _T_162) @[Bitwise.scala 48:55]
    node _T_165 = dshl(_T_163, UInt<2>("h02")) @[VectorMult.scala 116:114]
    node _T_166 = add(sum[3], _T_165) @[VectorMult.scala 116:68]
    sum[4] <= _T_166 @[VectorMult.scala 116:48]
    node _T_167 = and(io.weight[1], io.activation[2]) @[VectorMult.scala 116:94]
    node _T_168 = bits(_T_167, 0, 0) @[Bitwise.scala 50:65]
    node _T_169 = bits(_T_167, 1, 1) @[Bitwise.scala 50:65]
    node _T_170 = bits(_T_167, 2, 2) @[Bitwise.scala 50:65]
    node _T_171 = bits(_T_167, 3, 3) @[Bitwise.scala 50:65]
    node _T_172 = add(_T_168, _T_169) @[Bitwise.scala 48:55]
    node _T_173 = add(_T_170, _T_171) @[Bitwise.scala 48:55]
    node _T_174 = add(_T_172, _T_173) @[Bitwise.scala 48:55]
    node _T_176 = dshl(_T_174, UInt<2>("h03")) @[VectorMult.scala 116:114]
    node _T_177 = add(sum[4], _T_176) @[VectorMult.scala 116:68]
    sum[5] <= _T_177 @[VectorMult.scala 116:48]
    node _T_178 = and(io.weight[2], io.activation[0]) @[VectorMult.scala 116:94]
    node _T_179 = bits(_T_178, 0, 0) @[Bitwise.scala 50:65]
    node _T_180 = bits(_T_178, 1, 1) @[Bitwise.scala 50:65]
    node _T_181 = bits(_T_178, 2, 2) @[Bitwise.scala 50:65]
    node _T_182 = bits(_T_178, 3, 3) @[Bitwise.scala 50:65]
    node _T_183 = add(_T_179, _T_180) @[Bitwise.scala 48:55]
    node _T_184 = add(_T_181, _T_182) @[Bitwise.scala 48:55]
    node _T_185 = add(_T_183, _T_184) @[Bitwise.scala 48:55]
    node _T_187 = dshl(_T_185, UInt<2>("h02")) @[VectorMult.scala 116:114]
    node _T_188 = add(sum[5], _T_187) @[VectorMult.scala 116:68]
    sum[6] <= _T_188 @[VectorMult.scala 116:48]
    node _T_189 = and(io.weight[2], io.activation[1]) @[VectorMult.scala 116:94]
    node _T_190 = bits(_T_189, 0, 0) @[Bitwise.scala 50:65]
    node _T_191 = bits(_T_189, 1, 1) @[Bitwise.scala 50:65]
    node _T_192 = bits(_T_189, 2, 2) @[Bitwise.scala 50:65]
    node _T_193 = bits(_T_189, 3, 3) @[Bitwise.scala 50:65]
    node _T_194 = add(_T_190, _T_191) @[Bitwise.scala 48:55]
    node _T_195 = add(_T_192, _T_193) @[Bitwise.scala 48:55]
    node _T_196 = add(_T_194, _T_195) @[Bitwise.scala 48:55]
    node _T_198 = dshl(_T_196, UInt<2>("h03")) @[VectorMult.scala 116:114]
    node _T_199 = add(sum[6], _T_198) @[VectorMult.scala 116:68]
    sum[7] <= _T_199 @[VectorMult.scala 116:48]
    node _T_200 = and(io.weight[2], io.activation[2]) @[VectorMult.scala 116:94]
    node _T_201 = bits(_T_200, 0, 0) @[Bitwise.scala 50:65]
    node _T_202 = bits(_T_200, 1, 1) @[Bitwise.scala 50:65]
    node _T_203 = bits(_T_200, 2, 2) @[Bitwise.scala 50:65]
    node _T_204 = bits(_T_200, 3, 3) @[Bitwise.scala 50:65]
    node _T_205 = add(_T_201, _T_202) @[Bitwise.scala 48:55]
    node _T_206 = add(_T_203, _T_204) @[Bitwise.scala 48:55]
    node _T_207 = add(_T_205, _T_206) @[Bitwise.scala 48:55]
    node _T_209 = dshl(_T_207, UInt<3>("h04")) @[VectorMult.scala 116:114]
    node _T_210 = add(sum[7], _T_209) @[VectorMult.scala 116:68]
    sum[8] <= _T_210 @[VectorMult.scala 116:48]
    io.product <= sum[8] @[VectorMult.scala 120:20]
    
  module PrintNum : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip num : UInt<32>}
    
    node _T_7 = bits(reset, 0, 0) @[Test.scala 107:15]
    node _T_9 = eq(_T_7, UInt<1>("h00")) @[Test.scala 107:15]
    when _T_9 : @[Test.scala 107:15]
      printf(clock, UInt<1>(1), "result: %d\n", io.num) @[Test.scala 107:15]
      skip @[Test.scala 107:15]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _T_5 = bits(reset, 0, 0) @[Test.scala 148:15]
    node _T_7 = eq(_T_5, UInt<1>("h00")) @[Test.scala 148:15]
    when _T_7 : @[Test.scala 148:15]
      printf(clock, UInt<1>(1), "activation: \n") @[Test.scala 148:15]
      skip @[Test.scala 148:15]
    inst OneVecGen of OneVecGen @[Test.scala 149:45]
    OneVecGen.clock <= clock
    OneVecGen.reset <= reset
    inst BitPack of BitPack @[Test.scala 150:30]
    BitPack.clock <= clock
    BitPack.reset <= reset
    BitPack.io.arr[0] <= OneVecGen.io.arr[0] @[Test.scala 151:41]
    BitPack.io.arr[1] <= OneVecGen.io.arr[1] @[Test.scala 151:41]
    BitPack.io.arr[2] <= OneVecGen.io.arr[2] @[Test.scala 151:41]
    BitPack.io.arr[3] <= OneVecGen.io.arr[3] @[Test.scala 151:41]
    OneVecGen.io.out[0] <= BitPack.io.out[0] @[Test.scala 152:24]
    OneVecGen.io.out[1] <= BitPack.io.out[1] @[Test.scala 152:24]
    OneVecGen.io.out[2] <= BitPack.io.out[2] @[Test.scala 152:24]
    node _T_8 = bits(reset, 0, 0) @[Test.scala 154:31]
    node _T_10 = eq(_T_8, UInt<1>("h00")) @[Test.scala 154:31]
    when _T_10 : @[Test.scala 154:31]
      printf(clock, UInt<1>(1), "weight: \n") @[Test.scala 154:31]
      skip @[Test.scala 154:31]
    inst BitPack_1 of BitPack_1 @[Test.scala 155:28]
    BitPack_1.clock <= clock
    BitPack_1.reset <= reset
    inst OneVecGen_1 of OneVecGen_1 @[Test.scala 156:27]
    OneVecGen_1.clock <= clock
    OneVecGen_1.reset <= reset
    BitPack_1.io.arr[0] <= OneVecGen_1.io.arr[0] @[Test.scala 158:41]
    BitPack_1.io.arr[1] <= OneVecGen_1.io.arr[1] @[Test.scala 158:41]
    BitPack_1.io.arr[2] <= OneVecGen_1.io.arr[2] @[Test.scala 158:41]
    BitPack_1.io.arr[3] <= OneVecGen_1.io.arr[3] @[Test.scala 158:41]
    OneVecGen_1.io.out[0] <= BitPack_1.io.out[0] @[Test.scala 159:40]
    OneVecGen_1.io.out[1] <= BitPack_1.io.out[1] @[Test.scala 159:40]
    OneVecGen_1.io.out[2] <= BitPack_1.io.out[2] @[Test.scala 159:40]
    inst BitSerial of BitSerial @[Test.scala 161:47]
    BitSerial.clock <= clock
    BitSerial.reset <= reset
    inst PrintNum of PrintNum @[Test.scala 162:46]
    PrintNum.clock <= clock
    PrintNum.reset <= reset
    BitSerial.io.weight[0] <= BitPack_1.io.out[0] @[Test.scala 163:45]
    BitSerial.io.weight[1] <= BitPack_1.io.out[1] @[Test.scala 163:45]
    BitSerial.io.weight[2] <= BitPack_1.io.out[2] @[Test.scala 163:45]
    BitSerial.io.activation[0] <= BitPack.io.out[0] @[Test.scala 164:49]
    BitSerial.io.activation[1] <= BitPack.io.out[1] @[Test.scala 164:49]
    BitSerial.io.activation[2] <= BitPack.io.out[2] @[Test.scala 164:49]
    PrintNum.io.num <= BitSerial.io.product @[Test.scala 165:41]
    
