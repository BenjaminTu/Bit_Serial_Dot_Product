;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module OneVecGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<2>[4], flip out : UInt<4>[2]}
    
    wire _T_44 : UInt<2>[4] @[Test.scala 85:26]
    _T_44[0] <= UInt<1>("h01") @[Test.scala 85:26]
    _T_44[1] <= UInt<2>("h02") @[Test.scala 85:26]
    _T_44[2] <= UInt<1>("h00") @[Test.scala 85:26]
    _T_44[3] <= UInt<2>("h02") @[Test.scala 85:26]
    io.arr[0] <= _T_44[0] @[Test.scala 85:16]
    io.arr[1] <= _T_44[1] @[Test.scala 85:16]
    io.arr[2] <= _T_44[2] @[Test.scala 85:16]
    io.arr[3] <= _T_44[3] @[Test.scala 85:16]
    when UInt<1>("h01") : @[Test.scala 90:17]
      node _T_52 = bits(reset, 0, 0) @[Test.scala 91:11]
      node _T_54 = eq(_T_52, UInt<1>("h00")) @[Test.scala 91:11]
      when _T_54 : @[Test.scala 91:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 91:11]
        skip @[Test.scala 91:11]
      node _T_55 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_57 = eq(_T_55, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_57 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[0]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_58 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_60 = eq(_T_58, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_60 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[1]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_61 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_63 = eq(_T_61, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_63 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[2]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_64 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_66 = eq(_T_64, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_66 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[3]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_67 = bits(reset, 0, 0) @[Test.scala 95:23]
      node _T_69 = eq(_T_67, UInt<1>("h00")) @[Test.scala 95:23]
      when _T_69 : @[Test.scala 95:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 95:23]
        skip @[Test.scala 95:23]
      node _T_70 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_72 = eq(_T_70, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_72 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_73 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_75 = eq(_T_73, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_75 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_76 = bits(reset, 0, 0) @[Test.scala 99:23]
      node _T_78 = eq(_T_76, UInt<1>("h00")) @[Test.scala 99:23]
      when _T_78 : @[Test.scala 99:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 99:23]
        skip @[Test.scala 99:23]
      skip @[Test.scala 90:17]
    
  module BitPack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<2>[4], out : UInt<4>[2]}
    
    wire _T_44 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_44[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_44[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_44[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_44[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_58 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_58[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_58[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_58[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_58[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire bitArr : UInt<1>[4][2] @[VectorMult.scala 87:29]
    bitArr[0][0] <= _T_44[0] @[VectorMult.scala 87:29]
    bitArr[0][1] <= _T_44[1] @[VectorMult.scala 87:29]
    bitArr[0][2] <= _T_44[2] @[VectorMult.scala 87:29]
    bitArr[0][3] <= _T_44[3] @[VectorMult.scala 87:29]
    bitArr[1][0] <= _T_58[0] @[VectorMult.scala 87:29]
    bitArr[1][1] <= _T_58[1] @[VectorMult.scala 87:29]
    bitArr[1][2] <= _T_58[2] @[VectorMult.scala 87:29]
    bitArr[1][3] <= _T_58[3] @[VectorMult.scala 87:29]
    node _T_243 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_245 = and(_T_243, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][0] <= _T_245 @[VectorMult.scala 90:38]
    node _T_247 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_249 = and(_T_247, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][0] <= _T_249 @[VectorMult.scala 90:38]
    node _T_251 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_253 = and(_T_251, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][1] <= _T_253 @[VectorMult.scala 90:38]
    node _T_255 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_257 = and(_T_255, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][1] <= _T_257 @[VectorMult.scala 90:38]
    node _T_259 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_261 = and(_T_259, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][2] <= _T_261 @[VectorMult.scala 90:38]
    node _T_263 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_265 = and(_T_263, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][2] <= _T_265 @[VectorMult.scala 90:38]
    node _T_267 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_269 = and(_T_267, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][3] <= _T_269 @[VectorMult.scala 90:38]
    node _T_271 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_273 = and(_T_271, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][3] <= _T_273 @[VectorMult.scala 90:38]
    node _T_274 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 95:40]
    node _T_275 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 95:40]
    node _T_276 = cat(_T_275, _T_274) @[VectorMult.scala 95:40]
    io.out[0] <= _T_276 @[VectorMult.scala 95:27]
    node _T_277 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 95:40]
    node _T_278 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 95:40]
    node _T_279 = cat(_T_278, _T_277) @[VectorMult.scala 95:40]
    io.out[1] <= _T_279 @[VectorMult.scala 95:27]
    
  module BitPack_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<3>[4], out : UInt<4>[3]}
    
    wire _T_46 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_46[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_46[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_60 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_60[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_60[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire _T_74 : UInt<1>[4] @[VectorMult.scala 87:57]
    _T_74[0] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[1] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[2] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    _T_74[3] <= UInt<1>("h00") @[VectorMult.scala 87:57]
    wire bitArr : UInt<1>[4][3] @[VectorMult.scala 87:29]
    bitArr[0][0] <= _T_46[0] @[VectorMult.scala 87:29]
    bitArr[0][1] <= _T_46[1] @[VectorMult.scala 87:29]
    bitArr[0][2] <= _T_46[2] @[VectorMult.scala 87:29]
    bitArr[0][3] <= _T_46[3] @[VectorMult.scala 87:29]
    bitArr[1][0] <= _T_60[0] @[VectorMult.scala 87:29]
    bitArr[1][1] <= _T_60[1] @[VectorMult.scala 87:29]
    bitArr[1][2] <= _T_60[2] @[VectorMult.scala 87:29]
    bitArr[1][3] <= _T_60[3] @[VectorMult.scala 87:29]
    bitArr[2][0] <= _T_74[0] @[VectorMult.scala 87:29]
    bitArr[2][1] <= _T_74[1] @[VectorMult.scala 87:29]
    bitArr[2][2] <= _T_74[2] @[VectorMult.scala 87:29]
    bitArr[2][3] <= _T_74[3] @[VectorMult.scala 87:29]
    node _T_313 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_315 = and(_T_313, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][0] <= _T_315 @[VectorMult.scala 90:38]
    node _T_317 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_319 = and(_T_317, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][0] <= _T_319 @[VectorMult.scala 90:38]
    node _T_321 = dshr(io.arr[0], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_323 = and(_T_321, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][0] <= _T_323 @[VectorMult.scala 90:38]
    node _T_325 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_327 = and(_T_325, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][1] <= _T_327 @[VectorMult.scala 90:38]
    node _T_329 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_331 = and(_T_329, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][1] <= _T_331 @[VectorMult.scala 90:38]
    node _T_333 = dshr(io.arr[1], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_335 = and(_T_333, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][1] <= _T_335 @[VectorMult.scala 90:38]
    node _T_337 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_339 = and(_T_337, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][2] <= _T_339 @[VectorMult.scala 90:38]
    node _T_341 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_343 = and(_T_341, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][2] <= _T_343 @[VectorMult.scala 90:38]
    node _T_345 = dshr(io.arr[2], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_347 = and(_T_345, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][2] <= _T_347 @[VectorMult.scala 90:38]
    node _T_349 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 90:52]
    node _T_351 = and(_T_349, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[0][3] <= _T_351 @[VectorMult.scala 90:38]
    node _T_353 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 90:52]
    node _T_355 = and(_T_353, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[1][3] <= _T_355 @[VectorMult.scala 90:38]
    node _T_357 = dshr(io.arr[3], UInt<2>("h02")) @[VectorMult.scala 90:52]
    node _T_359 = and(_T_357, UInt<1>("h01")) @[VectorMult.scala 90:60]
    bitArr[2][3] <= _T_359 @[VectorMult.scala 90:38]
    node _T_360 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 95:40]
    node _T_361 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 95:40]
    node _T_362 = cat(_T_361, _T_360) @[VectorMult.scala 95:40]
    io.out[0] <= _T_362 @[VectorMult.scala 95:27]
    node _T_363 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 95:40]
    node _T_364 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 95:40]
    node _T_365 = cat(_T_364, _T_363) @[VectorMult.scala 95:40]
    io.out[1] <= _T_365 @[VectorMult.scala 95:27]
    node _T_366 = cat(bitArr[2][1], bitArr[2][0]) @[VectorMult.scala 95:40]
    node _T_367 = cat(bitArr[2][3], bitArr[2][2]) @[VectorMult.scala 95:40]
    node _T_368 = cat(_T_367, _T_366) @[VectorMult.scala 95:40]
    io.out[2] <= _T_368 @[VectorMult.scala 95:27]
    
  module OneVecGen_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<3>[4], flip out : UInt<4>[3]}
    
    wire _T_46 : UInt<3>[4] @[Test.scala 85:26]
    _T_46[0] <= UInt<2>("h02") @[Test.scala 85:26]
    _T_46[1] <= UInt<3>("h06") @[Test.scala 85:26]
    _T_46[2] <= UInt<2>("h03") @[Test.scala 85:26]
    _T_46[3] <= UInt<3>("h05") @[Test.scala 85:26]
    io.arr[0] <= _T_46[0] @[Test.scala 85:16]
    io.arr[1] <= _T_46[1] @[Test.scala 85:16]
    io.arr[2] <= _T_46[2] @[Test.scala 85:16]
    io.arr[3] <= _T_46[3] @[Test.scala 85:16]
    when UInt<1>("h01") : @[Test.scala 90:17]
      node _T_54 = bits(reset, 0, 0) @[Test.scala 91:11]
      node _T_56 = eq(_T_54, UInt<1>("h00")) @[Test.scala 91:11]
      when _T_56 : @[Test.scala 91:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 91:11]
        skip @[Test.scala 91:11]
      node _T_57 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_59 = eq(_T_57, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_59 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[0]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_60 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_62 = eq(_T_60, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_62 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[1]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_63 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_65 = eq(_T_63, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_65 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[2]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_66 = bits(reset, 0, 0) @[Test.scala 93:14]
      node _T_68 = eq(_T_66, UInt<1>("h00")) @[Test.scala 93:14]
      when _T_68 : @[Test.scala 93:14]
        printf(clock, UInt<1>(1), "%d, ", io.arr[3]) @[Test.scala 93:14]
        skip @[Test.scala 93:14]
      node _T_69 = bits(reset, 0, 0) @[Test.scala 95:23]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[Test.scala 95:23]
      when _T_71 : @[Test.scala 95:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 95:23]
        skip @[Test.scala 95:23]
      node _T_72 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_74 = eq(_T_72, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_74 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_75 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_77 = eq(_T_75, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_77 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_78 = bits(reset, 0, 0) @[Test.scala 97:31]
      node _T_80 = eq(_T_78, UInt<1>("h00")) @[Test.scala 97:31]
      when _T_80 : @[Test.scala 97:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[2]) @[Test.scala 97:31]
        skip @[Test.scala 97:31]
      node _T_81 = bits(reset, 0, 0) @[Test.scala 99:23]
      node _T_83 = eq(_T_81, UInt<1>("h00")) @[Test.scala 99:23]
      when _T_83 : @[Test.scala 99:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 99:23]
        skip @[Test.scala 99:23]
      skip @[Test.scala 90:17]
    
  module BitSerial : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip weight : UInt<4>[3], flip activation : UInt<4>[2], product : UInt<8>}
    
    wire initVal : UInt<8>[6] @[VectorMult.scala 110:30]
    initVal[0] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    initVal[1] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    initVal[2] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    initVal[3] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    initVal[4] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    initVal[5] <= UInt<8>("h00") @[VectorMult.scala 110:30]
    reg sum : UInt<8>[6], clock with : (reset => (reset, initVal)) @[VectorMult.scala 111:26]
    node _T_92 = and(io.weight[0], io.activation[0]) @[VectorMult.scala 112:41]
    node _T_93 = bits(_T_92, 0, 0) @[Bitwise.scala 50:65]
    node _T_94 = bits(_T_92, 1, 1) @[Bitwise.scala 50:65]
    node _T_95 = bits(_T_92, 2, 2) @[Bitwise.scala 50:65]
    node _T_96 = bits(_T_92, 3, 3) @[Bitwise.scala 50:65]
    node _T_97 = add(_T_93, _T_94) @[Bitwise.scala 48:55]
    node _T_98 = add(_T_95, _T_96) @[Bitwise.scala 48:55]
    node _T_99 = add(_T_97, _T_98) @[Bitwise.scala 48:55]
    sum[0] <= _T_99 @[VectorMult.scala 112:16]
    node _T_100 = and(io.weight[0], io.activation[1]) @[VectorMult.scala 119:94]
    node _T_101 = bits(_T_100, 0, 0) @[Bitwise.scala 50:65]
    node _T_102 = bits(_T_100, 1, 1) @[Bitwise.scala 50:65]
    node _T_103 = bits(_T_100, 2, 2) @[Bitwise.scala 50:65]
    node _T_104 = bits(_T_100, 3, 3) @[Bitwise.scala 50:65]
    node _T_105 = add(_T_101, _T_102) @[Bitwise.scala 48:55]
    node _T_106 = add(_T_103, _T_104) @[Bitwise.scala 48:55]
    node _T_107 = add(_T_105, _T_106) @[Bitwise.scala 48:55]
    node _T_109 = dshl(_T_107, UInt<1>("h01")) @[VectorMult.scala 119:114]
    node _T_110 = add(sum[0], _T_109) @[VectorMult.scala 119:68]
    sum[1] <= _T_110 @[VectorMult.scala 119:48]
    node _T_111 = and(io.weight[1], io.activation[0]) @[VectorMult.scala 119:94]
    node _T_112 = bits(_T_111, 0, 0) @[Bitwise.scala 50:65]
    node _T_113 = bits(_T_111, 1, 1) @[Bitwise.scala 50:65]
    node _T_114 = bits(_T_111, 2, 2) @[Bitwise.scala 50:65]
    node _T_115 = bits(_T_111, 3, 3) @[Bitwise.scala 50:65]
    node _T_116 = add(_T_112, _T_113) @[Bitwise.scala 48:55]
    node _T_117 = add(_T_114, _T_115) @[Bitwise.scala 48:55]
    node _T_118 = add(_T_116, _T_117) @[Bitwise.scala 48:55]
    node _T_120 = dshl(_T_118, UInt<1>("h01")) @[VectorMult.scala 119:114]
    node _T_121 = add(sum[1], _T_120) @[VectorMult.scala 119:68]
    sum[2] <= _T_121 @[VectorMult.scala 119:48]
    node _T_122 = and(io.weight[1], io.activation[1]) @[VectorMult.scala 119:94]
    node _T_123 = bits(_T_122, 0, 0) @[Bitwise.scala 50:65]
    node _T_124 = bits(_T_122, 1, 1) @[Bitwise.scala 50:65]
    node _T_125 = bits(_T_122, 2, 2) @[Bitwise.scala 50:65]
    node _T_126 = bits(_T_122, 3, 3) @[Bitwise.scala 50:65]
    node _T_127 = add(_T_123, _T_124) @[Bitwise.scala 48:55]
    node _T_128 = add(_T_125, _T_126) @[Bitwise.scala 48:55]
    node _T_129 = add(_T_127, _T_128) @[Bitwise.scala 48:55]
    node _T_131 = dshl(_T_129, UInt<2>("h02")) @[VectorMult.scala 119:114]
    node _T_132 = add(sum[2], _T_131) @[VectorMult.scala 119:68]
    sum[3] <= _T_132 @[VectorMult.scala 119:48]
    node _T_133 = and(io.weight[2], io.activation[0]) @[VectorMult.scala 119:94]
    node _T_134 = bits(_T_133, 0, 0) @[Bitwise.scala 50:65]
    node _T_135 = bits(_T_133, 1, 1) @[Bitwise.scala 50:65]
    node _T_136 = bits(_T_133, 2, 2) @[Bitwise.scala 50:65]
    node _T_137 = bits(_T_133, 3, 3) @[Bitwise.scala 50:65]
    node _T_138 = add(_T_134, _T_135) @[Bitwise.scala 48:55]
    node _T_139 = add(_T_136, _T_137) @[Bitwise.scala 48:55]
    node _T_140 = add(_T_138, _T_139) @[Bitwise.scala 48:55]
    node _T_142 = dshl(_T_140, UInt<2>("h02")) @[VectorMult.scala 119:114]
    node _T_143 = add(sum[3], _T_142) @[VectorMult.scala 119:68]
    sum[4] <= _T_143 @[VectorMult.scala 119:48]
    node _T_144 = and(io.weight[2], io.activation[1]) @[VectorMult.scala 119:94]
    node _T_145 = bits(_T_144, 0, 0) @[Bitwise.scala 50:65]
    node _T_146 = bits(_T_144, 1, 1) @[Bitwise.scala 50:65]
    node _T_147 = bits(_T_144, 2, 2) @[Bitwise.scala 50:65]
    node _T_148 = bits(_T_144, 3, 3) @[Bitwise.scala 50:65]
    node _T_149 = add(_T_145, _T_146) @[Bitwise.scala 48:55]
    node _T_150 = add(_T_147, _T_148) @[Bitwise.scala 48:55]
    node _T_151 = add(_T_149, _T_150) @[Bitwise.scala 48:55]
    node _T_153 = dshl(_T_151, UInt<2>("h03")) @[VectorMult.scala 119:114]
    node _T_154 = add(sum[4], _T_153) @[VectorMult.scala 119:68]
    sum[5] <= _T_154 @[VectorMult.scala 119:48]
    io.product <= sum[5] @[VectorMult.scala 126:20]
    
  module PrintNum : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip num : UInt<32>}
    
    node _T_7 = bits(reset, 0, 0) @[Test.scala 107:15]
    node _T_9 = eq(_T_7, UInt<1>("h00")) @[Test.scala 107:15]
    when _T_9 : @[Test.scala 107:15]
      printf(clock, UInt<1>(1), "result: %d\n", io.num) @[Test.scala 107:15]
      skip @[Test.scala 107:15]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _T_5 = bits(reset, 0, 0) @[Test.scala 148:15]
    node _T_7 = eq(_T_5, UInt<1>("h00")) @[Test.scala 148:15]
    when _T_7 : @[Test.scala 148:15]
      printf(clock, UInt<1>(1), "activation: \n") @[Test.scala 148:15]
      skip @[Test.scala 148:15]
    inst OneVecGen of OneVecGen @[Test.scala 149:45]
    OneVecGen.clock <= clock
    OneVecGen.reset <= reset
    inst BitPack of BitPack @[Test.scala 150:30]
    BitPack.clock <= clock
    BitPack.reset <= reset
    BitPack.io.arr[0] <= OneVecGen.io.arr[0] @[Test.scala 151:41]
    BitPack.io.arr[1] <= OneVecGen.io.arr[1] @[Test.scala 151:41]
    BitPack.io.arr[2] <= OneVecGen.io.arr[2] @[Test.scala 151:41]
    BitPack.io.arr[3] <= OneVecGen.io.arr[3] @[Test.scala 151:41]
    OneVecGen.io.out[0] <= BitPack.io.out[0] @[Test.scala 152:24]
    OneVecGen.io.out[1] <= BitPack.io.out[1] @[Test.scala 152:24]
    node _T_8 = bits(reset, 0, 0) @[Test.scala 154:31]
    node _T_10 = eq(_T_8, UInt<1>("h00")) @[Test.scala 154:31]
    when _T_10 : @[Test.scala 154:31]
      printf(clock, UInt<1>(1), "weight: \n") @[Test.scala 154:31]
      skip @[Test.scala 154:31]
    inst BitPack_1 of BitPack_1 @[Test.scala 155:28]
    BitPack_1.clock <= clock
    BitPack_1.reset <= reset
    inst OneVecGen_1 of OneVecGen_1 @[Test.scala 156:27]
    OneVecGen_1.clock <= clock
    OneVecGen_1.reset <= reset
    BitPack_1.io.arr[0] <= OneVecGen_1.io.arr[0] @[Test.scala 158:41]
    BitPack_1.io.arr[1] <= OneVecGen_1.io.arr[1] @[Test.scala 158:41]
    BitPack_1.io.arr[2] <= OneVecGen_1.io.arr[2] @[Test.scala 158:41]
    BitPack_1.io.arr[3] <= OneVecGen_1.io.arr[3] @[Test.scala 158:41]
    OneVecGen_1.io.out[0] <= BitPack_1.io.out[0] @[Test.scala 159:40]
    OneVecGen_1.io.out[1] <= BitPack_1.io.out[1] @[Test.scala 159:40]
    OneVecGen_1.io.out[2] <= BitPack_1.io.out[2] @[Test.scala 159:40]
    inst BitSerial of BitSerial @[Test.scala 161:47]
    BitSerial.clock <= clock
    BitSerial.reset <= reset
    inst PrintNum of PrintNum @[Test.scala 162:46]
    PrintNum.clock <= clock
    PrintNum.reset <= reset
    BitSerial.io.weight[0] <= BitPack_1.io.out[0] @[Test.scala 163:45]
    BitSerial.io.weight[1] <= BitPack_1.io.out[1] @[Test.scala 163:45]
    BitSerial.io.weight[2] <= BitPack_1.io.out[2] @[Test.scala 163:45]
    BitSerial.io.activation[0] <= BitPack.io.out[0] @[Test.scala 164:49]
    BitSerial.io.activation[1] <= BitPack.io.out[1] @[Test.scala 164:49]
    PrintNum.io.num <= BitSerial.io.product @[Test.scala 165:41]
    
