;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Test : 
  module DotGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {a : UInt<4>[5], b : UInt<4>[5], flip y : UInt<12>, rst : UInt<1>}
    
    reg value : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_53 = eq(value, UInt<8>("h0ff")) @[Counter.scala 34:24]
      node _T_55 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_56 = tail(_T_55, 1) @[Counter.scala 35:22]
      value <= _T_56 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node _T_57 = and(UInt<1>("h01"), _T_53) @[Counter.scala 64:20]
    node _T_59 = rem(value, UInt<4>("h0f")) @[Test.scala 61:13]
    node _T_61 = lt(_T_59, UInt<3>("h07")) @[Test.scala 61:20]
    when _T_61 : @[Test.scala 61:27]
      wire _T_70 : UInt<3>[5] @[Test.scala 62:32]
      _T_70[0] <= UInt<3>("h06") @[Test.scala 62:32]
      _T_70[1] <= UInt<3>("h06") @[Test.scala 62:32]
      _T_70[2] <= UInt<3>("h06") @[Test.scala 62:32]
      _T_70[3] <= UInt<3>("h06") @[Test.scala 62:32]
      _T_70[4] <= UInt<3>("h06") @[Test.scala 62:32]
      io.a[0] <= _T_70[0] @[Test.scala 62:22]
      io.a[1] <= _T_70[1] @[Test.scala 62:22]
      io.a[2] <= _T_70[2] @[Test.scala 62:22]
      io.a[3] <= _T_70[3] @[Test.scala 62:22]
      io.a[4] <= _T_70[4] @[Test.scala 62:22]
      wire _T_86 : UInt<3>[5] @[Test.scala 63:32]
      _T_86[0] <= UInt<3>("h05") @[Test.scala 63:32]
      _T_86[1] <= UInt<3>("h05") @[Test.scala 63:32]
      _T_86[2] <= UInt<3>("h05") @[Test.scala 63:32]
      _T_86[3] <= UInt<3>("h05") @[Test.scala 63:32]
      _T_86[4] <= UInt<3>("h05") @[Test.scala 63:32]
      io.b[0] <= _T_86[0] @[Test.scala 63:22]
      io.b[1] <= _T_86[1] @[Test.scala 63:22]
      io.b[2] <= _T_86[2] @[Test.scala 63:22]
      io.b[3] <= _T_86[3] @[Test.scala 63:22]
      io.b[4] <= _T_86[4] @[Test.scala 63:22]
      skip @[Test.scala 61:27]
    else : @[Test.scala 64:28]
      wire _T_102 : UInt<4>[5] @[Test.scala 65:20]
      _T_102[0] <= UInt<4>("h0a") @[Test.scala 65:20]
      _T_102[1] <= UInt<4>("h0a") @[Test.scala 65:20]
      _T_102[2] <= UInt<4>("h0a") @[Test.scala 65:20]
      _T_102[3] <= UInt<4>("h0a") @[Test.scala 65:20]
      _T_102[4] <= UInt<4>("h0a") @[Test.scala 65:20]
      io.a[0] <= _T_102[0] @[Test.scala 65:10]
      io.a[1] <= _T_102[1] @[Test.scala 65:10]
      io.a[2] <= _T_102[2] @[Test.scala 65:10]
      io.a[3] <= _T_102[3] @[Test.scala 65:10]
      io.a[4] <= _T_102[4] @[Test.scala 65:10]
      wire _T_118 : UInt<4>[5] @[Test.scala 66:20]
      _T_118[0] <= UInt<4>("h0c") @[Test.scala 66:20]
      _T_118[1] <= UInt<4>("h0c") @[Test.scala 66:20]
      _T_118[2] <= UInt<4>("h0c") @[Test.scala 66:20]
      _T_118[3] <= UInt<4>("h0c") @[Test.scala 66:20]
      _T_118[4] <= UInt<4>("h0c") @[Test.scala 66:20]
      io.b[0] <= _T_118[0] @[Test.scala 66:10]
      io.b[1] <= _T_118[1] @[Test.scala 66:10]
      io.b[2] <= _T_118[2] @[Test.scala 66:10]
      io.b[3] <= _T_118[3] @[Test.scala 66:10]
      io.b[4] <= _T_118[4] @[Test.scala 66:10]
      skip @[Test.scala 64:28]
    node _T_127 = rem(value, UInt<4>("h0f")) @[Test.scala 68:22]
    node _T_129 = eq(_T_127, UInt<3>("h07")) @[Test.scala 68:28]
    node _T_131 = rem(value, UInt<4>("h0f")) @[Test.scala 68:41]
    node _T_133 = eq(_T_131, UInt<1>("h00")) @[Test.scala 68:47]
    node _T_134 = or(_T_129, _T_133) @[Test.scala 68:36]
    io.rst <= _T_134 @[Test.scala 68:16]
    when UInt<1>("h01") : @[Test.scala 73:23]
      node _T_136 = bits(reset, 0, 0) @[Test.scala 74:23]
      node _T_138 = eq(_T_136, UInt<1>("h00")) @[Test.scala 74:23]
      when _T_138 : @[Test.scala 74:23]
        printf(clock, UInt<1>(1), "arrA: ") @[Test.scala 74:23]
        skip @[Test.scala 74:23]
      node _T_139 = bits(reset, 0, 0) @[Test.scala 76:14]
      node _T_141 = eq(_T_139, UInt<1>("h00")) @[Test.scala 76:14]
      when _T_141 : @[Test.scala 76:14]
        printf(clock, UInt<1>(1), "%d, ", io.a[0]) @[Test.scala 76:14]
        skip @[Test.scala 76:14]
      node _T_142 = bits(reset, 0, 0) @[Test.scala 76:14]
      node _T_144 = eq(_T_142, UInt<1>("h00")) @[Test.scala 76:14]
      when _T_144 : @[Test.scala 76:14]
        printf(clock, UInt<1>(1), "%d, ", io.a[1]) @[Test.scala 76:14]
        skip @[Test.scala 76:14]
      node _T_145 = bits(reset, 0, 0) @[Test.scala 76:14]
      node _T_147 = eq(_T_145, UInt<1>("h00")) @[Test.scala 76:14]
      when _T_147 : @[Test.scala 76:14]
        printf(clock, UInt<1>(1), "%d, ", io.a[2]) @[Test.scala 76:14]
        skip @[Test.scala 76:14]
      node _T_148 = bits(reset, 0, 0) @[Test.scala 76:14]
      node _T_150 = eq(_T_148, UInt<1>("h00")) @[Test.scala 76:14]
      when _T_150 : @[Test.scala 76:14]
        printf(clock, UInt<1>(1), "%d, ", io.a[3]) @[Test.scala 76:14]
        skip @[Test.scala 76:14]
      node _T_151 = bits(reset, 0, 0) @[Test.scala 76:14]
      node _T_153 = eq(_T_151, UInt<1>("h00")) @[Test.scala 76:14]
      when _T_153 : @[Test.scala 76:14]
        printf(clock, UInt<1>(1), "%d, ", io.a[4]) @[Test.scala 76:14]
        skip @[Test.scala 76:14]
      node _T_154 = bits(reset, 0, 0) @[Test.scala 78:23]
      node _T_156 = eq(_T_154, UInt<1>("h00")) @[Test.scala 78:23]
      when _T_156 : @[Test.scala 78:23]
        printf(clock, UInt<1>(1), "\narrB: ") @[Test.scala 78:23]
        skip @[Test.scala 78:23]
      node _T_157 = bits(reset, 0, 0) @[Test.scala 80:14]
      node _T_159 = eq(_T_157, UInt<1>("h00")) @[Test.scala 80:14]
      when _T_159 : @[Test.scala 80:14]
        printf(clock, UInt<1>(1), "%d, ", io.b[0]) @[Test.scala 80:14]
        skip @[Test.scala 80:14]
      node _T_160 = bits(reset, 0, 0) @[Test.scala 80:14]
      node _T_162 = eq(_T_160, UInt<1>("h00")) @[Test.scala 80:14]
      when _T_162 : @[Test.scala 80:14]
        printf(clock, UInt<1>(1), "%d, ", io.b[1]) @[Test.scala 80:14]
        skip @[Test.scala 80:14]
      node _T_163 = bits(reset, 0, 0) @[Test.scala 80:14]
      node _T_165 = eq(_T_163, UInt<1>("h00")) @[Test.scala 80:14]
      when _T_165 : @[Test.scala 80:14]
        printf(clock, UInt<1>(1), "%d, ", io.b[2]) @[Test.scala 80:14]
        skip @[Test.scala 80:14]
      node _T_166 = bits(reset, 0, 0) @[Test.scala 80:14]
      node _T_168 = eq(_T_166, UInt<1>("h00")) @[Test.scala 80:14]
      when _T_168 : @[Test.scala 80:14]
        printf(clock, UInt<1>(1), "%d, ", io.b[3]) @[Test.scala 80:14]
        skip @[Test.scala 80:14]
      node _T_169 = bits(reset, 0, 0) @[Test.scala 80:14]
      node _T_171 = eq(_T_169, UInt<1>("h00")) @[Test.scala 80:14]
      when _T_171 : @[Test.scala 80:14]
        printf(clock, UInt<1>(1), "%d, ", io.b[4]) @[Test.scala 80:14]
        skip @[Test.scala 80:14]
      node _T_172 = bits(reset, 0, 0) @[Test.scala 82:23]
      node _T_174 = eq(_T_172, UInt<1>("h00")) @[Test.scala 82:23]
      when _T_174 : @[Test.scala 82:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 82:23]
        skip @[Test.scala 82:23]
      node _T_175 = bits(reset, 0, 0) @[Test.scala 83:11]
      node _T_177 = eq(_T_175, UInt<1>("h00")) @[Test.scala 83:11]
      when _T_177 : @[Test.scala 83:11]
        printf(clock, UInt<1>(1), "\ny: %d\n", io.y) @[Test.scala 83:11]
        skip @[Test.scala 83:11]
      skip @[Test.scala 73:23]
    
  module Dot : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip start : UInt<1>, flip arrA : UInt<4>[5], flip arrB : UInt<4>[5], valid : UInt<1>, res : UInt<12>}
    
    wire _T_59 : UInt<8>[5] @[Top.scala 16:34]
    _T_59[0] <= UInt<8>("h00") @[Top.scala 16:34]
    _T_59[1] <= UInt<8>("h00") @[Top.scala 16:34]
    _T_59[2] <= UInt<8>("h00") @[Top.scala 16:34]
    _T_59[3] <= UInt<8>("h00") @[Top.scala 16:34]
    _T_59[4] <= UInt<8>("h00") @[Top.scala 16:34]
    reg product : UInt<8>[5], clock with : (reset => (reset, _T_59)) @[Top.scala 16:30]
    wire _T_108 : UInt<12>[5] @[Top.scala 17:32]
    _T_108[0] <= UInt<12>("h00") @[Top.scala 17:32]
    _T_108[1] <= UInt<12>("h00") @[Top.scala 17:32]
    _T_108[2] <= UInt<12>("h00") @[Top.scala 17:32]
    _T_108[3] <= UInt<12>("h00") @[Top.scala 17:32]
    _T_108[4] <= UInt<12>("h00") @[Top.scala 17:32]
    reg accum : UInt<12>[5], clock with : (reset => (reset, _T_108)) @[Top.scala 17:28]
    reg cnt : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Top.scala 18:26]
    when io.start : @[Top.scala 19:25]
      cnt <= UInt<1>("h00") @[Top.scala 20:21]
      skip @[Top.scala 19:25]
    else : @[Top.scala 21:22]
      accum[0] <= product[0] @[Top.scala 22:26]
      node _T_152 = mul(io.arrA[0], io.arrB[0]) @[Top.scala 23:42]
      product[0] <= _T_152 @[Top.scala 23:28]
      node _T_153 = mul(io.arrA[1], io.arrB[1]) @[Top.scala 25:50]
      product[1] <= _T_153 @[Top.scala 25:36]
      node _T_154 = add(accum[0], product[1]) @[Top.scala 26:48]
      accum[1] <= _T_154 @[Top.scala 26:34]
      node _T_155 = mul(io.arrA[2], io.arrB[2]) @[Top.scala 25:50]
      product[2] <= _T_155 @[Top.scala 25:36]
      node _T_156 = add(accum[1], product[2]) @[Top.scala 26:48]
      accum[2] <= _T_156 @[Top.scala 26:34]
      node _T_157 = mul(io.arrA[3], io.arrB[3]) @[Top.scala 25:50]
      product[3] <= _T_157 @[Top.scala 25:36]
      node _T_158 = add(accum[2], product[3]) @[Top.scala 26:48]
      accum[3] <= _T_158 @[Top.scala 26:34]
      node _T_159 = mul(io.arrA[4], io.arrB[4]) @[Top.scala 25:50]
      product[4] <= _T_159 @[Top.scala 25:36]
      node _T_160 = add(accum[3], product[4]) @[Top.scala 26:48]
      accum[4] <= _T_160 @[Top.scala 26:34]
      node _T_162 = add(cnt, UInt<1>("h01")) @[Top.scala 30:28]
      node _T_163 = tail(_T_162, 1) @[Top.scala 30:28]
      cnt <= _T_163 @[Top.scala 30:21]
      node _T_164 = bits(reset, 0, 0) @[Top.scala 31:23]
      node _T_166 = eq(_T_164, UInt<1>("h00")) @[Top.scala 31:23]
      when _T_166 : @[Top.scala 31:23]
        printf(clock, UInt<1>(1), "\ncnt: %d, valid: %d\n", cnt, io.valid) @[Top.scala 31:23]
        skip @[Top.scala 31:23]
      skip @[Top.scala 21:22]
    io.res <= accum[4] @[Top.scala 34:16]
    node _T_168 = eq(cnt, UInt<3>("h05")) @[Top.scala 35:25]
    io.valid <= _T_168 @[Top.scala 35:18]
    
  module PrintNum : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip num : UInt<64>, flip valid : UInt<1>}
    
    when io.valid : @[Test.scala 131:24]
      node _T_9 = bits(reset, 0, 0) @[Test.scala 132:23]
      node _T_11 = eq(_T_9, UInt<1>("h00")) @[Test.scala 132:23]
      when _T_11 : @[Test.scala 132:23]
        printf(clock, UInt<1>(1), "\nresult: %d\n", io.num) @[Test.scala 132:23]
        skip @[Test.scala 132:23]
      skip @[Test.scala 131:24]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst DotGen of DotGen @[Test.scala 148:42]
    DotGen.clock <= clock
    DotGen.reset <= reset
    inst Dot of Dot @[Test.scala 149:41]
    Dot.clock <= clock
    Dot.reset <= reset
    inst PrintNum of PrintNum @[Test.scala 150:42]
    PrintNum.clock <= clock
    PrintNum.reset <= reset
    Dot.io.arrA[0] <= DotGen.io.a[0] @[Test.scala 151:37]
    Dot.io.arrA[1] <= DotGen.io.a[1] @[Test.scala 151:37]
    Dot.io.arrA[2] <= DotGen.io.a[2] @[Test.scala 151:37]
    Dot.io.arrA[3] <= DotGen.io.a[3] @[Test.scala 151:37]
    Dot.io.arrA[4] <= DotGen.io.a[4] @[Test.scala 151:37]
    Dot.io.arrB[0] <= DotGen.io.b[0] @[Test.scala 152:37]
    Dot.io.arrB[1] <= DotGen.io.b[1] @[Test.scala 152:37]
    Dot.io.arrB[2] <= DotGen.io.b[2] @[Test.scala 152:37]
    Dot.io.arrB[3] <= DotGen.io.b[3] @[Test.scala 152:37]
    Dot.io.arrB[4] <= DotGen.io.b[4] @[Test.scala 152:37]
    DotGen.io.y <= Dot.io.res @[Test.scala 153:35]
    Dot.io.start <= DotGen.io.rst @[Test.scala 154:38]
    PrintNum.io.valid <= Dot.io.valid @[Test.scala 155:39]
    PrintNum.io.num <= Dot.io.res @[Test.scala 156:37]
    
