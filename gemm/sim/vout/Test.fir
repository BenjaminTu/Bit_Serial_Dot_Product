;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Test : 
  module VectorGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {a : SInt<8>[16], b : SInt<8>[16], flip y : SInt<32>}
    
    wire _T_110 : SInt<5>[16] @[Test.scala 19:18]
    _T_110[0] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[1] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[2] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[3] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[4] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[5] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[6] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[7] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[8] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[9] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[10] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[11] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[12] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[13] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[14] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    _T_110[15] <= asSInt(UInt<5>("h0a")) @[Test.scala 19:18]
    io.a[0] <= _T_110[0] @[Test.scala 19:8]
    io.a[1] <= _T_110[1] @[Test.scala 19:8]
    io.a[2] <= _T_110[2] @[Test.scala 19:8]
    io.a[3] <= _T_110[3] @[Test.scala 19:8]
    io.a[4] <= _T_110[4] @[Test.scala 19:8]
    io.a[5] <= _T_110[5] @[Test.scala 19:8]
    io.a[6] <= _T_110[6] @[Test.scala 19:8]
    io.a[7] <= _T_110[7] @[Test.scala 19:8]
    io.a[8] <= _T_110[8] @[Test.scala 19:8]
    io.a[9] <= _T_110[9] @[Test.scala 19:8]
    io.a[10] <= _T_110[10] @[Test.scala 19:8]
    io.a[11] <= _T_110[11] @[Test.scala 19:8]
    io.a[12] <= _T_110[12] @[Test.scala 19:8]
    io.a[13] <= _T_110[13] @[Test.scala 19:8]
    io.a[14] <= _T_110[14] @[Test.scala 19:8]
    io.a[15] <= _T_110[15] @[Test.scala 19:8]
    wire _T_148 : SInt<5>[16] @[Test.scala 20:18]
    _T_148[0] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[1] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[2] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[3] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[4] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[5] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[6] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[7] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[8] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[9] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[10] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[11] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[12] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[13] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[14] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    _T_148[15] <= asSInt(UInt<5>("h014")) @[Test.scala 20:18]
    io.b[0] <= _T_148[0] @[Test.scala 20:8]
    io.b[1] <= _T_148[1] @[Test.scala 20:8]
    io.b[2] <= _T_148[2] @[Test.scala 20:8]
    io.b[3] <= _T_148[3] @[Test.scala 20:8]
    io.b[4] <= _T_148[4] @[Test.scala 20:8]
    io.b[5] <= _T_148[5] @[Test.scala 20:8]
    io.b[6] <= _T_148[6] @[Test.scala 20:8]
    io.b[7] <= _T_148[7] @[Test.scala 20:8]
    io.b[8] <= _T_148[8] @[Test.scala 20:8]
    io.b[9] <= _T_148[9] @[Test.scala 20:8]
    io.b[10] <= _T_148[10] @[Test.scala 20:8]
    io.b[11] <= _T_148[11] @[Test.scala 20:8]
    io.b[12] <= _T_148[12] @[Test.scala 20:8]
    io.b[13] <= _T_148[13] @[Test.scala 20:8]
    io.b[14] <= _T_148[14] @[Test.scala 20:8]
    io.b[15] <= _T_148[15] @[Test.scala 20:8]
    when UInt<1>("h01") : @[Test.scala 22:17]
      node _T_168 = bits(reset, 0, 0) @[Test.scala 23:11]
      node _T_170 = eq(_T_168, UInt<1>("h00")) @[Test.scala 23:11]
      when _T_170 : @[Test.scala 23:11]
        printf(clock, UInt<1>(1), "\ny: ") @[Test.scala 23:11]
        skip @[Test.scala 23:11]
      node _T_171 = bits(io.y, 0, 0) @[Test.scala 25:27]
      node _T_172 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_174 = eq(_T_172, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_174 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_171) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_175 = bits(io.y, 1, 1) @[Test.scala 25:27]
      node _T_176 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_178 = eq(_T_176, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_178 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_175) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_179 = bits(io.y, 2, 2) @[Test.scala 25:27]
      node _T_180 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_182 = eq(_T_180, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_182 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_179) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_183 = bits(io.y, 3, 3) @[Test.scala 25:27]
      node _T_184 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_186 = eq(_T_184, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_186 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_183) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_187 = bits(io.y, 4, 4) @[Test.scala 25:27]
      node _T_188 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_190 = eq(_T_188, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_190 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_187) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_191 = bits(io.y, 5, 5) @[Test.scala 25:27]
      node _T_192 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_194 = eq(_T_192, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_194 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_191) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_195 = bits(io.y, 6, 6) @[Test.scala 25:27]
      node _T_196 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_198 = eq(_T_196, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_198 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_195) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_199 = bits(io.y, 7, 7) @[Test.scala 25:27]
      node _T_200 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_202 = eq(_T_200, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_202 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_199) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_203 = bits(io.y, 8, 8) @[Test.scala 25:27]
      node _T_204 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_206 = eq(_T_204, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_206 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_203) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_207 = bits(io.y, 9, 9) @[Test.scala 25:27]
      node _T_208 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_210 = eq(_T_208, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_210 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_207) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_211 = bits(io.y, 10, 10) @[Test.scala 25:27]
      node _T_212 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_214 = eq(_T_212, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_214 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_211) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_215 = bits(io.y, 11, 11) @[Test.scala 25:27]
      node _T_216 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_218 = eq(_T_216, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_218 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_215) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_219 = bits(io.y, 12, 12) @[Test.scala 25:27]
      node _T_220 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_222 = eq(_T_220, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_222 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_219) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_223 = bits(io.y, 13, 13) @[Test.scala 25:27]
      node _T_224 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_226 = eq(_T_224, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_226 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_223) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_227 = bits(io.y, 14, 14) @[Test.scala 25:27]
      node _T_228 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_230 = eq(_T_228, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_230 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_227) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_231 = bits(io.y, 15, 15) @[Test.scala 25:27]
      node _T_232 = bits(reset, 0, 0) @[Test.scala 25:14]
      node _T_234 = eq(_T_232, UInt<1>("h00")) @[Test.scala 25:14]
      when _T_234 : @[Test.scala 25:14]
        printf(clock, UInt<1>(1), "%d ,", _T_231) @[Test.scala 25:14]
        skip @[Test.scala 25:14]
      node _T_235 = bits(reset, 0, 0) @[Test.scala 27:11]
      node _T_237 = eq(_T_235, UInt<1>("h00")) @[Test.scala 27:11]
      when _T_237 : @[Test.scala 27:11]
        printf(clock, UInt<1>(1), "\n\n") @[Test.scala 27:11]
        skip @[Test.scala 27:11]
      skip @[Test.scala 22:17]
    
  module MAC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module MAC_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>, flip b : SInt<8>, flip c : SInt<16>, y : SInt<17>}
    
    wire mult : SInt<16> @[Gemm.scala 17:18]
    wire add : SInt<17> @[Gemm.scala 18:17]
    reg rA : SInt, clock @[Gemm.scala 19:19]
    rA <= io.a @[Gemm.scala 19:19]
    reg rB : SInt, clock @[Gemm.scala 20:19]
    rB <= io.b @[Gemm.scala 20:19]
    reg rC : SInt, clock @[Gemm.scala 21:19]
    rC <= io.c @[Gemm.scala 21:19]
    node _T_18 = mul(rA, rB) @[Gemm.scala 22:14]
    mult <= _T_18 @[Gemm.scala 22:8]
    node _T_19 = add(rC, mult) @[Gemm.scala 23:13]
    add <= _T_19 @[Gemm.scala 23:7]
    io.y <= add @[Gemm.scala 24:8]
    
  module Adder : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<17>, flip b : SInt<17>, y : SInt<18>}
    
    wire add : SInt<18> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<17>, flip b : SInt<17>, y : SInt<18>}
    
    wire add : SInt<18> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<17>, flip b : SInt<17>, y : SInt<18>}
    
    wire add : SInt<18> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<17>, flip b : SInt<17>, y : SInt<18>}
    
    wire add : SInt<18> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<18>, flip b : SInt<18>, y : SInt<19>}
    
    wire add : SInt<19> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<18>, flip b : SInt<18>, y : SInt<19>}
    
    wire add : SInt<19> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module Adder_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<19>, flip b : SInt<19>, y : SInt<20>}
    
    wire add : SInt<20> @[Gemm.scala 35:17]
    reg rA : SInt, clock @[Gemm.scala 36:19]
    rA <= io.a @[Gemm.scala 36:19]
    reg rB : SInt, clock @[Gemm.scala 37:19]
    rB <= io.b @[Gemm.scala 37:19]
    node _T_14 = add(rA, rB) @[Gemm.scala 38:13]
    add <= _T_14 @[Gemm.scala 38:7]
    io.y <= add @[Gemm.scala 39:8]
    
  module DotProduct : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<8>[16], flip b : SInt<8>[16], y : SInt<21>}
    
    reg da_0 : SInt, clock @[Gemm.scala 55:43]
    da_0 <= io.a[8] @[Gemm.scala 55:43]
    reg da_1 : SInt, clock @[Gemm.scala 55:43]
    da_1 <= io.a[9] @[Gemm.scala 55:43]
    reg da_2 : SInt, clock @[Gemm.scala 55:43]
    da_2 <= io.a[10] @[Gemm.scala 55:43]
    reg da_3 : SInt, clock @[Gemm.scala 55:43]
    da_3 <= io.a[11] @[Gemm.scala 55:43]
    reg da_4 : SInt, clock @[Gemm.scala 55:43]
    da_4 <= io.a[12] @[Gemm.scala 55:43]
    reg da_5 : SInt, clock @[Gemm.scala 55:43]
    da_5 <= io.a[13] @[Gemm.scala 55:43]
    reg da_6 : SInt, clock @[Gemm.scala 55:43]
    da_6 <= io.a[14] @[Gemm.scala 55:43]
    reg da_7 : SInt, clock @[Gemm.scala 55:43]
    da_7 <= io.a[15] @[Gemm.scala 55:43]
    reg db_0 : SInt, clock @[Gemm.scala 56:43]
    db_0 <= io.b[8] @[Gemm.scala 56:43]
    reg db_1 : SInt, clock @[Gemm.scala 56:43]
    db_1 <= io.b[9] @[Gemm.scala 56:43]
    reg db_2 : SInt, clock @[Gemm.scala 56:43]
    db_2 <= io.b[10] @[Gemm.scala 56:43]
    reg db_3 : SInt, clock @[Gemm.scala 56:43]
    db_3 <= io.b[11] @[Gemm.scala 56:43]
    reg db_4 : SInt, clock @[Gemm.scala 56:43]
    db_4 <= io.b[12] @[Gemm.scala 56:43]
    reg db_5 : SInt, clock @[Gemm.scala 56:43]
    db_5 <= io.b[13] @[Gemm.scala 56:43]
    reg db_6 : SInt, clock @[Gemm.scala 56:43]
    db_6 <= io.b[14] @[Gemm.scala 56:43]
    reg db_7 : SInt, clock @[Gemm.scala 56:43]
    db_7 <= io.b[15] @[Gemm.scala 56:43]
    inst m_0 of MAC @[Gemm.scala 57:32]
    m_0.clock <= clock
    m_0.reset <= reset
    inst m_1 of MAC_1 @[Gemm.scala 57:32]
    m_1.clock <= clock
    m_1.reset <= reset
    inst m_2 of MAC_2 @[Gemm.scala 57:32]
    m_2.clock <= clock
    m_2.reset <= reset
    inst m_3 of MAC_3 @[Gemm.scala 57:32]
    m_3.clock <= clock
    m_3.reset <= reset
    inst m_4 of MAC_4 @[Gemm.scala 57:32]
    m_4.clock <= clock
    m_4.reset <= reset
    inst m_5 of MAC_5 @[Gemm.scala 57:32]
    m_5.clock <= clock
    m_5.reset <= reset
    inst m_6 of MAC_6 @[Gemm.scala 57:32]
    m_6.clock <= clock
    m_6.reset <= reset
    inst m_7 of MAC_7 @[Gemm.scala 57:32]
    m_7.clock <= clock
    m_7.reset <= reset
    inst a_0_0 of Adder @[Gemm.scala 59:30]
    a_0_0.clock <= clock
    a_0_0.reset <= reset
    inst a_0_1 of Adder_1 @[Gemm.scala 59:30]
    a_0_1.clock <= clock
    a_0_1.reset <= reset
    inst a_0_2 of Adder_2 @[Gemm.scala 59:30]
    a_0_2.clock <= clock
    a_0_2.reset <= reset
    inst a_0_3 of Adder_3 @[Gemm.scala 59:30]
    a_0_3.clock <= clock
    a_0_3.reset <= reset
    inst a_1_0 of Adder_4 @[Gemm.scala 59:30]
    a_1_0.clock <= clock
    a_1_0.reset <= reset
    inst a_1_1 of Adder_5 @[Gemm.scala 59:30]
    a_1_1.clock <= clock
    a_1_1.reset <= reset
    inst a_2_0 of Adder_6 @[Gemm.scala 59:30]
    a_2_0.clock <= clock
    a_2_0.reset <= reset
    m_0.io.a <= io.a[0] @[Gemm.scala 64:15]
    m_0.io.b <= io.b[0] @[Gemm.scala 65:15]
    m_0.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_1.io.a <= io.a[1] @[Gemm.scala 64:15]
    m_1.io.b <= io.b[1] @[Gemm.scala 65:15]
    m_1.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_2.io.a <= io.a[2] @[Gemm.scala 64:15]
    m_2.io.b <= io.b[2] @[Gemm.scala 65:15]
    m_2.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_3.io.a <= io.a[3] @[Gemm.scala 64:15]
    m_3.io.b <= io.b[3] @[Gemm.scala 65:15]
    m_3.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_4.io.a <= io.a[4] @[Gemm.scala 64:15]
    m_4.io.b <= io.b[4] @[Gemm.scala 65:15]
    m_4.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_5.io.a <= io.a[5] @[Gemm.scala 64:15]
    m_5.io.b <= io.b[5] @[Gemm.scala 65:15]
    m_5.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_6.io.a <= io.a[6] @[Gemm.scala 64:15]
    m_6.io.b <= io.b[6] @[Gemm.scala 65:15]
    m_6.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    m_7.io.a <= io.a[7] @[Gemm.scala 64:15]
    m_7.io.b <= io.b[7] @[Gemm.scala 65:15]
    m_7.io.c <= asSInt(UInt<1>("h00")) @[Gemm.scala 66:15]
    a_0_0.io.a <= m_0.io.y @[Gemm.scala 74:22]
    a_0_0.io.b <= m_1.io.y @[Gemm.scala 75:22]
    a_0_1.io.a <= m_2.io.y @[Gemm.scala 74:22]
    a_0_1.io.b <= m_3.io.y @[Gemm.scala 75:22]
    a_0_2.io.a <= m_4.io.y @[Gemm.scala 74:22]
    a_0_2.io.b <= m_5.io.y @[Gemm.scala 75:22]
    a_0_3.io.a <= m_6.io.y @[Gemm.scala 74:22]
    a_0_3.io.b <= m_7.io.y @[Gemm.scala 75:22]
    a_1_0.io.a <= a_0_0.io.y @[Gemm.scala 77:22]
    a_1_0.io.b <= a_0_1.io.y @[Gemm.scala 78:22]
    a_1_1.io.a <= a_0_2.io.y @[Gemm.scala 77:22]
    a_1_1.io.b <= a_0_3.io.y @[Gemm.scala 78:22]
    a_2_0.io.a <= a_1_0.io.y @[Gemm.scala 77:22]
    a_2_0.io.b <= a_1_1.io.y @[Gemm.scala 78:22]
    io.y <= a_2_0.io.y @[Gemm.scala 84:8]
    when UInt<1>("h01") : @[Gemm.scala 86:17]
      node _T_116 = bits(reset, 0, 0) @[Gemm.scala 87:11]
      node _T_118 = eq(_T_116, UInt<1>("h00")) @[Gemm.scala 87:11]
      when _T_118 : @[Gemm.scala 87:11]
        printf(clock, UInt<1>(1), "\na: ") @[Gemm.scala 87:11]
        skip @[Gemm.scala 87:11]
      node _T_119 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_121 = eq(_T_119, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_121 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[0]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_122 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_124 = eq(_T_122, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_124 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[1]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_125 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_127 = eq(_T_125, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_127 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[2]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_128 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_130 = eq(_T_128, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_130 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[3]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_131 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_133 = eq(_T_131, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_133 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[4]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_134 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_136 = eq(_T_134, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_136 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[5]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_137 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_139 = eq(_T_137, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_139 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[6]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_140 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_142 = eq(_T_140, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_142 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[7]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_143 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_145 = eq(_T_143, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_145 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[8]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_146 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_148 = eq(_T_146, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_148 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[9]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_149 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_151 = eq(_T_149, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_151 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[10]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_152 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_154 = eq(_T_152, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_154 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[11]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_155 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_157 = eq(_T_155, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_157 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[12]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_158 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_160 = eq(_T_158, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_160 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[13]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_161 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_163 = eq(_T_161, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_163 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[14]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_164 = bits(reset, 0, 0) @[Gemm.scala 89:14]
      node _T_166 = eq(_T_164, UInt<1>("h00")) @[Gemm.scala 89:14]
      when _T_166 : @[Gemm.scala 89:14]
        printf(clock, UInt<1>(1), "%d ,", io.a[15]) @[Gemm.scala 89:14]
        skip @[Gemm.scala 89:14]
      node _T_167 = bits(reset, 0, 0) @[Gemm.scala 91:11]
      node _T_169 = eq(_T_167, UInt<1>("h00")) @[Gemm.scala 91:11]
      when _T_169 : @[Gemm.scala 91:11]
        printf(clock, UInt<1>(1), "\nb: ") @[Gemm.scala 91:11]
        skip @[Gemm.scala 91:11]
      node _T_170 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_172 = eq(_T_170, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_172 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[0]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_173 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_175 = eq(_T_173, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_175 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[1]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_176 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_178 = eq(_T_176, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_178 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[2]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_179 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_181 = eq(_T_179, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_181 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[3]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_182 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_184 = eq(_T_182, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_184 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[4]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_185 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_187 = eq(_T_185, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_187 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[5]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_188 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_190 = eq(_T_188, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_190 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[6]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_191 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_193 = eq(_T_191, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_193 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[7]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_194 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_196 = eq(_T_194, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_196 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[8]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_197 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_199 = eq(_T_197, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_199 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[9]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_200 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_202 = eq(_T_200, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_202 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[10]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_203 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_205 = eq(_T_203, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_205 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[11]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_206 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_208 = eq(_T_206, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_208 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[12]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_209 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_211 = eq(_T_209, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_211 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[13]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_212 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_214 = eq(_T_212, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_214 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[14]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_215 = bits(reset, 0, 0) @[Gemm.scala 93:14]
      node _T_217 = eq(_T_215, UInt<1>("h00")) @[Gemm.scala 93:14]
      when _T_217 : @[Gemm.scala 93:14]
        printf(clock, UInt<1>(1), "%d ,", io.b[15]) @[Gemm.scala 93:14]
        skip @[Gemm.scala 93:14]
      node _T_218 = bits(reset, 0, 0) @[Gemm.scala 95:11]
      node _T_220 = eq(_T_218, UInt<1>("h00")) @[Gemm.scala 95:11]
      when _T_220 : @[Gemm.scala 95:11]
        printf(clock, UInt<1>(1), "\n\n") @[Gemm.scala 95:11]
        skip @[Gemm.scala 95:11]
      skip @[Gemm.scala 86:17]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst gen of VectorGen @[Test.scala 33:19]
    gen.clock <= clock
    gen.reset <= reset
    inst dp of DotProduct @[Test.scala 34:18]
    dp.clock <= clock
    dp.reset <= reset
    dp.io.a[0] <= gen.io.a[0] @[Test.scala 35:11]
    dp.io.a[1] <= gen.io.a[1] @[Test.scala 35:11]
    dp.io.a[2] <= gen.io.a[2] @[Test.scala 35:11]
    dp.io.a[3] <= gen.io.a[3] @[Test.scala 35:11]
    dp.io.a[4] <= gen.io.a[4] @[Test.scala 35:11]
    dp.io.a[5] <= gen.io.a[5] @[Test.scala 35:11]
    dp.io.a[6] <= gen.io.a[6] @[Test.scala 35:11]
    dp.io.a[7] <= gen.io.a[7] @[Test.scala 35:11]
    dp.io.a[8] <= gen.io.a[8] @[Test.scala 35:11]
    dp.io.a[9] <= gen.io.a[9] @[Test.scala 35:11]
    dp.io.a[10] <= gen.io.a[10] @[Test.scala 35:11]
    dp.io.a[11] <= gen.io.a[11] @[Test.scala 35:11]
    dp.io.a[12] <= gen.io.a[12] @[Test.scala 35:11]
    dp.io.a[13] <= gen.io.a[13] @[Test.scala 35:11]
    dp.io.a[14] <= gen.io.a[14] @[Test.scala 35:11]
    dp.io.a[15] <= gen.io.a[15] @[Test.scala 35:11]
    dp.io.b[0] <= gen.io.b[0] @[Test.scala 36:11]
    dp.io.b[1] <= gen.io.b[1] @[Test.scala 36:11]
    dp.io.b[2] <= gen.io.b[2] @[Test.scala 36:11]
    dp.io.b[3] <= gen.io.b[3] @[Test.scala 36:11]
    dp.io.b[4] <= gen.io.b[4] @[Test.scala 36:11]
    dp.io.b[5] <= gen.io.b[5] @[Test.scala 36:11]
    dp.io.b[6] <= gen.io.b[6] @[Test.scala 36:11]
    dp.io.b[7] <= gen.io.b[7] @[Test.scala 36:11]
    dp.io.b[8] <= gen.io.b[8] @[Test.scala 36:11]
    dp.io.b[9] <= gen.io.b[9] @[Test.scala 36:11]
    dp.io.b[10] <= gen.io.b[10] @[Test.scala 36:11]
    dp.io.b[11] <= gen.io.b[11] @[Test.scala 36:11]
    dp.io.b[12] <= gen.io.b[12] @[Test.scala 36:11]
    dp.io.b[13] <= gen.io.b[13] @[Test.scala 36:11]
    dp.io.b[14] <= gen.io.b[14] @[Test.scala 36:11]
    dp.io.b[15] <= gen.io.b[15] @[Test.scala 36:11]
    gen.io.y <= dp.io.y @[Test.scala 37:12]
    
