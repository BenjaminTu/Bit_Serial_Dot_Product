;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module OneVecGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<2>[4], flip out : UInt<4>[2]}
    
    node _T_38 = asUInt(asSInt(UInt<1>("h00"))) @[Test.scala 33:96]
    node _T_40 = asUInt(asSInt(UInt<1>("h01"))) @[Test.scala 33:96]
    node _T_42 = asUInt(asSInt(UInt<3>("h02"))) @[Test.scala 33:96]
    node _T_44 = asUInt(asSInt(UInt<1>("h00"))) @[Test.scala 33:96]
    wire _T_48 : UInt<3>[4] @[Test.scala 32:26]
    _T_48[0] <= _T_38 @[Test.scala 32:26]
    _T_48[1] <= _T_40 @[Test.scala 32:26]
    _T_48[2] <= _T_42 @[Test.scala 32:26]
    _T_48[3] <= _T_44 @[Test.scala 32:26]
    io.arr[0] <= _T_48[0] @[Test.scala 32:16]
    io.arr[1] <= _T_48[1] @[Test.scala 32:16]
    io.arr[2] <= _T_48[2] @[Test.scala 32:16]
    io.arr[3] <= _T_48[3] @[Test.scala 32:16]
    wire print : SInt<2>[4] @[Test.scala 35:28]
    print[0] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[1] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[2] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[3] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    when UInt<1>("h01") : @[Test.scala 36:17]
      node _T_69 = bits(reset, 0, 0) @[Test.scala 37:11]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[Test.scala 37:11]
      when _T_71 : @[Test.scala 37:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 37:11]
        skip @[Test.scala 37:11]
      node _T_72 = asSInt(io.arr[0]) @[Test.scala 39:48]
      print[0] <= _T_72 @[Test.scala 39:35]
      node _T_73 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_75 = eq(_T_73, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_75 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[0]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_76 = asSInt(io.arr[1]) @[Test.scala 39:48]
      print[1] <= _T_76 @[Test.scala 39:35]
      node _T_77 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_79 = eq(_T_77, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_79 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[1]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_80 = asSInt(io.arr[2]) @[Test.scala 39:48]
      print[2] <= _T_80 @[Test.scala 39:35]
      node _T_81 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_83 = eq(_T_81, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_83 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[2]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_84 = asSInt(io.arr[3]) @[Test.scala 39:48]
      print[3] <= _T_84 @[Test.scala 39:35]
      node _T_85 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_87 = eq(_T_85, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_87 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[3]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_88 = bits(reset, 0, 0) @[Test.scala 42:23]
      node _T_90 = eq(_T_88, UInt<1>("h00")) @[Test.scala 42:23]
      when _T_90 : @[Test.scala 42:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 42:23]
        skip @[Test.scala 42:23]
      node _T_91 = bits(reset, 0, 0) @[Test.scala 44:31]
      node _T_93 = eq(_T_91, UInt<1>("h00")) @[Test.scala 44:31]
      when _T_93 : @[Test.scala 44:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 44:31]
        skip @[Test.scala 44:31]
      node _T_94 = bits(reset, 0, 0) @[Test.scala 44:31]
      node _T_96 = eq(_T_94, UInt<1>("h00")) @[Test.scala 44:31]
      when _T_96 : @[Test.scala 44:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 44:31]
        skip @[Test.scala 44:31]
      node _T_97 = bits(reset, 0, 0) @[Test.scala 46:23]
      node _T_99 = eq(_T_97, UInt<1>("h00")) @[Test.scala 46:23]
      when _T_99 : @[Test.scala 46:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 46:23]
        skip @[Test.scala 46:23]
      skip @[Test.scala 36:17]
    
  module BitPack : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<2>[4], out : UInt<4>[2]}
    
    wire _T_44 : UInt<1>[4] @[VectorMult.scala 43:57]
    _T_44[0] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[1] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[2] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[3] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    wire _T_58 : UInt<1>[4] @[VectorMult.scala 43:57]
    _T_58[0] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[1] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[2] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[3] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    wire bitArr : UInt<1>[4][2] @[VectorMult.scala 43:29]
    bitArr[0][0] <= _T_44[0] @[VectorMult.scala 43:29]
    bitArr[0][1] <= _T_44[1] @[VectorMult.scala 43:29]
    bitArr[0][2] <= _T_44[2] @[VectorMult.scala 43:29]
    bitArr[0][3] <= _T_44[3] @[VectorMult.scala 43:29]
    bitArr[1][0] <= _T_58[0] @[VectorMult.scala 43:29]
    bitArr[1][1] <= _T_58[1] @[VectorMult.scala 43:29]
    bitArr[1][2] <= _T_58[2] @[VectorMult.scala 43:29]
    bitArr[1][3] <= _T_58[3] @[VectorMult.scala 43:29]
    node _T_243 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_245 = and(_T_243, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][0] <= _T_245 @[VectorMult.scala 46:38]
    node _T_247 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_249 = and(_T_247, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][0] <= _T_249 @[VectorMult.scala 46:38]
    node _T_251 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_253 = and(_T_251, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][1] <= _T_253 @[VectorMult.scala 46:38]
    node _T_255 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_257 = and(_T_255, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][1] <= _T_257 @[VectorMult.scala 46:38]
    node _T_259 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_261 = and(_T_259, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][2] <= _T_261 @[VectorMult.scala 46:38]
    node _T_263 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_265 = and(_T_263, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][2] <= _T_265 @[VectorMult.scala 46:38]
    node _T_267 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_269 = and(_T_267, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][3] <= _T_269 @[VectorMult.scala 46:38]
    node _T_271 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_273 = and(_T_271, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][3] <= _T_273 @[VectorMult.scala 46:38]
    node _T_274 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 51:40]
    node _T_275 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 51:40]
    node _T_276 = cat(_T_275, _T_274) @[VectorMult.scala 51:40]
    io.out[0] <= _T_276 @[VectorMult.scala 51:27]
    node _T_277 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 51:40]
    node _T_278 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 51:40]
    node _T_279 = cat(_T_278, _T_277) @[VectorMult.scala 51:40]
    io.out[1] <= _T_279 @[VectorMult.scala 51:27]
    
  module BitPack_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip arr : UInt<2>[4], out : UInt<4>[2]}
    
    wire _T_44 : UInt<1>[4] @[VectorMult.scala 43:57]
    _T_44[0] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[1] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[2] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_44[3] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    wire _T_58 : UInt<1>[4] @[VectorMult.scala 43:57]
    _T_58[0] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[1] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[2] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    _T_58[3] <= UInt<1>("h00") @[VectorMult.scala 43:57]
    wire bitArr : UInt<1>[4][2] @[VectorMult.scala 43:29]
    bitArr[0][0] <= _T_44[0] @[VectorMult.scala 43:29]
    bitArr[0][1] <= _T_44[1] @[VectorMult.scala 43:29]
    bitArr[0][2] <= _T_44[2] @[VectorMult.scala 43:29]
    bitArr[0][3] <= _T_44[3] @[VectorMult.scala 43:29]
    bitArr[1][0] <= _T_58[0] @[VectorMult.scala 43:29]
    bitArr[1][1] <= _T_58[1] @[VectorMult.scala 43:29]
    bitArr[1][2] <= _T_58[2] @[VectorMult.scala 43:29]
    bitArr[1][3] <= _T_58[3] @[VectorMult.scala 43:29]
    node _T_243 = dshr(io.arr[0], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_245 = and(_T_243, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][0] <= _T_245 @[VectorMult.scala 46:38]
    node _T_247 = dshr(io.arr[0], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_249 = and(_T_247, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][0] <= _T_249 @[VectorMult.scala 46:38]
    node _T_251 = dshr(io.arr[1], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_253 = and(_T_251, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][1] <= _T_253 @[VectorMult.scala 46:38]
    node _T_255 = dshr(io.arr[1], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_257 = and(_T_255, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][1] <= _T_257 @[VectorMult.scala 46:38]
    node _T_259 = dshr(io.arr[2], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_261 = and(_T_259, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][2] <= _T_261 @[VectorMult.scala 46:38]
    node _T_263 = dshr(io.arr[2], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_265 = and(_T_263, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][2] <= _T_265 @[VectorMult.scala 46:38]
    node _T_267 = dshr(io.arr[3], UInt<1>("h00")) @[VectorMult.scala 46:52]
    node _T_269 = and(_T_267, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[0][3] <= _T_269 @[VectorMult.scala 46:38]
    node _T_271 = dshr(io.arr[3], UInt<1>("h01")) @[VectorMult.scala 46:52]
    node _T_273 = and(_T_271, UInt<1>("h01")) @[VectorMult.scala 46:60]
    bitArr[1][3] <= _T_273 @[VectorMult.scala 46:38]
    node _T_274 = cat(bitArr[0][1], bitArr[0][0]) @[VectorMult.scala 51:40]
    node _T_275 = cat(bitArr[0][3], bitArr[0][2]) @[VectorMult.scala 51:40]
    node _T_276 = cat(_T_275, _T_274) @[VectorMult.scala 51:40]
    io.out[0] <= _T_276 @[VectorMult.scala 51:27]
    node _T_277 = cat(bitArr[1][1], bitArr[1][0]) @[VectorMult.scala 51:40]
    node _T_278 = cat(bitArr[1][3], bitArr[1][2]) @[VectorMult.scala 51:40]
    node _T_279 = cat(_T_278, _T_277) @[VectorMult.scala 51:40]
    io.out[1] <= _T_279 @[VectorMult.scala 51:27]
    
  module OneVecGen_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {arr : UInt<2>[4], flip out : UInt<4>[2]}
    
    node _T_38 = asUInt(asSInt(UInt<3>("h02"))) @[Test.scala 33:96]
    node _T_40 = asUInt(asSInt(UInt<2>("h02"))) @[Test.scala 33:96]
    node _T_42 = asUInt(asSInt(UInt<2>("h02"))) @[Test.scala 33:96]
    node _T_44 = asUInt(asSInt(UInt<1>("h01"))) @[Test.scala 33:96]
    wire _T_48 : UInt<3>[4] @[Test.scala 32:26]
    _T_48[0] <= _T_38 @[Test.scala 32:26]
    _T_48[1] <= _T_40 @[Test.scala 32:26]
    _T_48[2] <= _T_42 @[Test.scala 32:26]
    _T_48[3] <= _T_44 @[Test.scala 32:26]
    io.arr[0] <= _T_48[0] @[Test.scala 32:16]
    io.arr[1] <= _T_48[1] @[Test.scala 32:16]
    io.arr[2] <= _T_48[2] @[Test.scala 32:16]
    io.arr[3] <= _T_48[3] @[Test.scala 32:16]
    wire print : SInt<2>[4] @[Test.scala 35:28]
    print[0] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[1] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[2] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    print[3] <= asSInt(UInt<2>("h00")) @[Test.scala 35:28]
    when UInt<1>("h01") : @[Test.scala 36:17]
      node _T_69 = bits(reset, 0, 0) @[Test.scala 37:11]
      node _T_71 = eq(_T_69, UInt<1>("h00")) @[Test.scala 37:11]
      when _T_71 : @[Test.scala 37:11]
        printf(clock, UInt<1>(1), "arr:") @[Test.scala 37:11]
        skip @[Test.scala 37:11]
      node _T_72 = asSInt(io.arr[0]) @[Test.scala 39:48]
      print[0] <= _T_72 @[Test.scala 39:35]
      node _T_73 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_75 = eq(_T_73, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_75 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[0]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_76 = asSInt(io.arr[1]) @[Test.scala 39:48]
      print[1] <= _T_76 @[Test.scala 39:35]
      node _T_77 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_79 = eq(_T_77, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_79 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[1]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_80 = asSInt(io.arr[2]) @[Test.scala 39:48]
      print[2] <= _T_80 @[Test.scala 39:35]
      node _T_81 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_83 = eq(_T_81, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_83 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[2]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_84 = asSInt(io.arr[3]) @[Test.scala 39:48]
      print[3] <= _T_84 @[Test.scala 39:35]
      node _T_85 = bits(reset, 0, 0) @[Test.scala 40:14]
      node _T_87 = eq(_T_85, UInt<1>("h00")) @[Test.scala 40:14]
      when _T_87 : @[Test.scala 40:14]
        printf(clock, UInt<1>(1), "%b ", print[3]) @[Test.scala 40:14]
        skip @[Test.scala 40:14]
      node _T_88 = bits(reset, 0, 0) @[Test.scala 42:23]
      node _T_90 = eq(_T_88, UInt<1>("h00")) @[Test.scala 42:23]
      when _T_90 : @[Test.scala 42:23]
        printf(clock, UInt<1>(1), "packed result: ") @[Test.scala 42:23]
        skip @[Test.scala 42:23]
      node _T_91 = bits(reset, 0, 0) @[Test.scala 44:31]
      node _T_93 = eq(_T_91, UInt<1>("h00")) @[Test.scala 44:31]
      when _T_93 : @[Test.scala 44:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[0]) @[Test.scala 44:31]
        skip @[Test.scala 44:31]
      node _T_94 = bits(reset, 0, 0) @[Test.scala 44:31]
      node _T_96 = eq(_T_94, UInt<1>("h00")) @[Test.scala 44:31]
      when _T_96 : @[Test.scala 44:31]
        printf(clock, UInt<1>(1), "%d, ", io.out[1]) @[Test.scala 44:31]
        skip @[Test.scala 44:31]
      node _T_97 = bits(reset, 0, 0) @[Test.scala 46:23]
      node _T_99 = eq(_T_97, UInt<1>("h00")) @[Test.scala 46:23]
      when _T_99 : @[Test.scala 46:23]
        printf(clock, UInt<1>(1), "\n") @[Test.scala 46:23]
        skip @[Test.scala 46:23]
      skip @[Test.scala 36:17]
    
  module BitSerial : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip weight : UInt<4>[2], flip activation : UInt<4>[2], product : UInt<7>}
    
    wire initVal : UInt<7>[4] @[VectorMult.scala 66:30]
    initVal[0] <= UInt<7>("h00") @[VectorMult.scala 66:30]
    initVal[1] <= UInt<7>("h00") @[VectorMult.scala 66:30]
    initVal[2] <= UInt<7>("h00") @[VectorMult.scala 66:30]
    initVal[3] <= UInt<7>("h00") @[VectorMult.scala 66:30]
    reg sum : UInt<7>[4], clock with : (reset => (reset, initVal)) @[VectorMult.scala 67:26]
    node _T_76 = and(io.weight[0], io.activation[0]) @[VectorMult.scala 68:41]
    node _T_77 = bits(_T_76, 0, 0) @[Bitwise.scala 50:65]
    node _T_78 = bits(_T_76, 1, 1) @[Bitwise.scala 50:65]
    node _T_79 = bits(_T_76, 2, 2) @[Bitwise.scala 50:65]
    node _T_80 = bits(_T_76, 3, 3) @[Bitwise.scala 50:65]
    node _T_81 = add(_T_77, _T_78) @[Bitwise.scala 48:55]
    node _T_82 = add(_T_79, _T_80) @[Bitwise.scala 48:55]
    node _T_83 = add(_T_81, _T_82) @[Bitwise.scala 48:55]
    sum[0] <= _T_83 @[VectorMult.scala 68:16]
    node _T_84 = and(io.weight[0], io.activation[1]) @[VectorMult.scala 72:94]
    node _T_85 = bits(_T_84, 0, 0) @[Bitwise.scala 50:65]
    node _T_86 = bits(_T_84, 1, 1) @[Bitwise.scala 50:65]
    node _T_87 = bits(_T_84, 2, 2) @[Bitwise.scala 50:65]
    node _T_88 = bits(_T_84, 3, 3) @[Bitwise.scala 50:65]
    node _T_89 = add(_T_85, _T_86) @[Bitwise.scala 48:55]
    node _T_90 = add(_T_87, _T_88) @[Bitwise.scala 48:55]
    node _T_91 = add(_T_89, _T_90) @[Bitwise.scala 48:55]
    node _T_93 = dshl(_T_91, UInt<1>("h01")) @[VectorMult.scala 72:114]
    node _T_94 = add(sum[0], _T_93) @[VectorMult.scala 72:68]
    sum[1] <= _T_94 @[VectorMult.scala 72:48]
    node _T_95 = and(io.weight[1], io.activation[0]) @[VectorMult.scala 72:94]
    node _T_96 = bits(_T_95, 0, 0) @[Bitwise.scala 50:65]
    node _T_97 = bits(_T_95, 1, 1) @[Bitwise.scala 50:65]
    node _T_98 = bits(_T_95, 2, 2) @[Bitwise.scala 50:65]
    node _T_99 = bits(_T_95, 3, 3) @[Bitwise.scala 50:65]
    node _T_100 = add(_T_96, _T_97) @[Bitwise.scala 48:55]
    node _T_101 = add(_T_98, _T_99) @[Bitwise.scala 48:55]
    node _T_102 = add(_T_100, _T_101) @[Bitwise.scala 48:55]
    node _T_104 = dshl(_T_102, UInt<1>("h01")) @[VectorMult.scala 72:114]
    node _T_105 = add(sum[1], _T_104) @[VectorMult.scala 72:68]
    sum[2] <= _T_105 @[VectorMult.scala 72:48]
    node _T_106 = and(io.weight[1], io.activation[1]) @[VectorMult.scala 72:94]
    node _T_107 = bits(_T_106, 0, 0) @[Bitwise.scala 50:65]
    node _T_108 = bits(_T_106, 1, 1) @[Bitwise.scala 50:65]
    node _T_109 = bits(_T_106, 2, 2) @[Bitwise.scala 50:65]
    node _T_110 = bits(_T_106, 3, 3) @[Bitwise.scala 50:65]
    node _T_111 = add(_T_107, _T_108) @[Bitwise.scala 48:55]
    node _T_112 = add(_T_109, _T_110) @[Bitwise.scala 48:55]
    node _T_113 = add(_T_111, _T_112) @[Bitwise.scala 48:55]
    node _T_115 = dshl(_T_113, UInt<2>("h02")) @[VectorMult.scala 72:114]
    node _T_116 = add(sum[2], _T_115) @[VectorMult.scala 72:68]
    sum[3] <= _T_116 @[VectorMult.scala 72:48]
    io.product <= sum[3] @[VectorMult.scala 76:20]
    
  module PrintNum : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip num : UInt<8>}
    
    node _T_7 = asSInt(io.num) @[Test.scala 54:75]
    node _T_8 = bits(reset, 0, 0) @[Test.scala 54:15]
    node _T_10 = eq(_T_8, UInt<1>("h00")) @[Test.scala 54:15]
    when _T_10 : @[Test.scala 54:15]
      printf(clock, UInt<1>(1), "Unsigned result: %d, Signed result: %d\n", io.num, _T_7) @[Test.scala 54:15]
      skip @[Test.scala 54:15]
    node _T_11 = asSInt(io.num) @[Test.scala 55:93]
    node _T_12 = bits(reset, 0, 0) @[Test.scala 55:15]
    node _T_14 = eq(_T_12, UInt<1>("h00")) @[Test.scala 55:15]
    when _T_14 : @[Test.scala 55:15]
      printf(clock, UInt<1>(1), "Binary: Unsigned result: %b, Signed result: %b\n", io.num, _T_11) @[Test.scala 55:15]
      skip @[Test.scala 55:15]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    node _T_5 = bits(reset, 0, 0) @[Test.scala 63:15]
    node _T_7 = eq(_T_5, UInt<1>("h00")) @[Test.scala 63:15]
    when _T_7 : @[Test.scala 63:15]
      printf(clock, UInt<1>(1), "activation: \n") @[Test.scala 63:15]
      skip @[Test.scala 63:15]
    inst aVecGen of OneVecGen @[Test.scala 64:29]
    aVecGen.clock <= clock
    aVecGen.reset <= reset
    inst aBitpack of BitPack @[Test.scala 65:30]
    aBitpack.clock <= clock
    aBitpack.reset <= reset
    aBitpack.io.arr[0] <= aVecGen.io.arr[0] @[Test.scala 66:25]
    aBitpack.io.arr[1] <= aVecGen.io.arr[1] @[Test.scala 66:25]
    aBitpack.io.arr[2] <= aVecGen.io.arr[2] @[Test.scala 66:25]
    aBitpack.io.arr[3] <= aVecGen.io.arr[3] @[Test.scala 66:25]
    aVecGen.io.out[0] <= aBitpack.io.out[0] @[Test.scala 67:24]
    aVecGen.io.out[1] <= aBitpack.io.out[1] @[Test.scala 67:24]
    node _T_8 = bits(reset, 0, 0) @[Test.scala 69:15]
    node _T_10 = eq(_T_8, UInt<1>("h00")) @[Test.scala 69:15]
    when _T_10 : @[Test.scala 69:15]
      printf(clock, UInt<1>(1), "weight: \n") @[Test.scala 69:15]
      skip @[Test.scala 69:15]
    inst wBitpack of BitPack_1 @[Test.scala 70:24]
    wBitpack.clock <= clock
    wBitpack.reset <= reset
    inst wVecGen of OneVecGen_1 @[Test.scala 71:23]
    wVecGen.clock <= clock
    wVecGen.reset <= reset
    wBitpack.io.arr[0] <= wVecGen.io.arr[0] @[Test.scala 73:25]
    wBitpack.io.arr[1] <= wVecGen.io.arr[1] @[Test.scala 73:25]
    wBitpack.io.arr[2] <= wVecGen.io.arr[2] @[Test.scala 73:25]
    wBitpack.io.arr[3] <= wVecGen.io.arr[3] @[Test.scala 73:25]
    wVecGen.io.out[0] <= wBitpack.io.out[0] @[Test.scala 74:24]
    wVecGen.io.out[1] <= wBitpack.io.out[1] @[Test.scala 74:24]
    inst bitSerial of BitSerial @[Test.scala 76:31]
    bitSerial.clock <= clock
    bitSerial.reset <= reset
    inst printNum of PrintNum @[Test.scala 77:30]
    printNum.clock <= clock
    printNum.reset <= reset
    bitSerial.io.weight[0] <= wBitpack.io.out[0] @[Test.scala 78:29]
    bitSerial.io.weight[1] <= wBitpack.io.out[1] @[Test.scala 78:29]
    bitSerial.io.activation[0] <= aBitpack.io.out[0] @[Test.scala 79:33]
    bitSerial.io.activation[1] <= aBitpack.io.out[1] @[Test.scala 79:33]
    printNum.io.num <= bitSerial.io.product @[Test.scala 80:25]
    
